{"version":3,"sources":["components/FlexibleDialog.js","libs/Styling.js","components/FormElements.js","../node_modules/@mui/icons-material/LockOpenOutlined.js","../node_modules/@mui/icons-material/LockOpen.js","components/auth/ForgotPassword.js"],"names":["FlexibleDialog","title","contentText","actions","props","onBackdropClick","onClose","event","reason","map","action","index","onClick","callback","closeModal","variant","autoFocus","style","textTransform","text","defaultProps","React","memo","shadeColor","color","amount","replace","Math","min","max","parseInt","toString","substr","FormInput","classes","makeStyles","theme","startAdornment","backgroundColor","height","maxHeight","marginLeft","marginRight","paddingLeft","paddingRight","borderRight","endAdornment","borderLeft","textField","useStyles","TextField","id","type","value","required","autoComplete","fullWidth","label","size","margin","className","placeholder","onChange","e","target","disabled","error","isEmptyObject","InputProps","startAdornmentIcon","InputAdornment","startAdornmentClass","position","endAdornmentIcon","endAdornmentClass","input","FormButton","button","spacing","fontSize","palette","success","main","buttonSecondary","secondary","dark","buttonFederated","justifyContent","buttonFederatedFacebook","socialButtons","facebook","buttonFederatedGoogle","google","styles","Button","social","capitalize","startIcon","children","cursor","textDecoration","classNameDisabled","FormControlLabel","control","Checkbox","checked","FormText","Typography","component","align","FormLink","normal","decoration","Link","href","FormDividerWithText","container","display","alignItems","marginTop","marginVertical","marginBottom","divider","width","borderBottom","primary","paddingHorizontal","_interopRequireDefault","require","Object","defineProperty","exports","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","avatar","fieldset","border","paddingTop","paddingBottom","ForgotPassword","useState","email","setEmail","password","setPassword","passwordConfirmed","setPasswordConfirmed","code","setError","waitingForCode","setWaitingForCode","codeDeliveryMedium","setCodeDeliveryMedium","setCode","history","useHistory","t","useTranslation","showModal","useModal","openDialog","validateForm","validateEmail","err","toast","warning","validatePassword","maxWidth","form","noValidate","m","preventDefault","AuthService","forgotPassword","then","result","Error","errorMessage","medium","console","log","confirmationCode","resetPasswordConfirm","response","data","keys","values","push","resendResetPasswordCode","info"],"mappings":"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","file":"static/js/13.d961b985.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@mui/material/Button\";\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@mui/material';\n\nconst FlexibleDialog = ({ title, contentText, actions, ...props }) => (\n  <Dialog\n    {...props}\n    onBackdropClick={() => {} /* disable modal close on backdrop click */}\n    //disableScrollLock={false}\n    //disableEnforceFocus={false}\n    aria-labelledby={title}\n    onClose={(event, reason) => { /* console.log(\"REASON:\", reason); */ }}\n  >\n    <DialogTitle>{title}</DialogTitle>\n    <DialogContent>\n      <DialogContentText>{contentText}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      {actions.map((action, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            action.callback();\n            if (action.closeModal) props.onClose();\n          }}\n          variant={action.variant === \"primary\" ? \"contained\" : action.variant === \"secondary\" ? \"outlined\" : \"contained\"}\n          autoFocus={props}\n          style={{textTransform: \"none\"}} // do not uppercase button text\n        >\n          {action.text}\n        </Button>\n      ))}\n    </DialogActions>\n  </Dialog>\n);\n\nFlexibleDialog.propTypes = {\n  title: PropTypes.string,\n  contentText: PropTypes.string,\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      closeModal: PropTypes.bool,\n      callback: PropTypes.func,\n      variant: PropTypes.oneOf([\n        \"primary\", \"secondary\",\n      ]),\n      autoFocus: PropTypes.bool,\n    })\n  ),\n};\n\nFlexibleDialog.defaultProps = {\n  title: \"\",\n  contentText: \"\",\n  actions: [\n    {\n      text: \"Ok\",\n      closeModal: true,\n      callback: () => {},\n      variant: \"primary\",\n      autoFocus: false,\n    }\n  ],\n};\n\nexport default React.memo(FlexibleDialog);","/**\n * Shade a color by an amount [-100 - 100] (negative is darker, positive is ligher).\n */\nexport const shadeColor = (color, amount) => {\n  return \"#\" + color.replace(/^#/, \"\").replace(/../g, color => (\"0\" + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));\n}\n","import React/*, { useState }*/ from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Link from \"@mui/material/Link\";\n//import Tooltip, { TooltipProps } from '@mui/material/Tooltip';\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { shadeColor } from \"../libs/Styling\";\nimport { capitalize, isEmptyObject } from \"../libs/Misc\";\n\n\n\nconst FormInput = React.memo((props) => {\n  const styles = theme => ({\n    startAdornment: {\n      backgroundColor: \"#efefff\",\n      height: \"2.5rem\",\n      maxHeight: \"3rem\",\n      marginLeft: -15,\n      marginRight: 5,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderRight: \"1px solid #c5c5c5\",\n    },\n    endAdornment: {\n      backgroundColor: \"#efefff\",\n      height: \"2.5rem\",\n      maxHeight: \"3rem\",\n      marginLeft: 5,\n      marginRight: -15,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderLeft: \"1px solid #c5c5c5\",\n    },\n    textField: {\n      backgroundColor: \"#efefff\",\n    }\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <TextField\n      id={props.id}\n      type={props.type}\n      value={props.value}\n      required={props.required}\n      autoFocus={props.autoFocus}\n      autoComplete={props.autoComplete.toString()}\n      variant={props.variant}\n      fullWidth={props.fullWidth}\n      label={props.label}\n      size={props.size}\n      margin={props.margin}\n      className={props.className ? props.className : classes.textField}\n      placeholder={props.placeholder}\n      onChange={e => props.onChange(e.target.value)}\n      disabled={props.disabled}\n      error={!isEmptyObject(props.error)}\n      InputProps={{\n        startAdornment: props.startAdornmentIcon ? (\n          <InputAdornment\n            className={props.startAdornmentClass ? props.startAdornmentClass : classes.startAdornment}\n            position=\"start\"\n          >\n            {props.startAdornmentIcon}\n          </InputAdornment>\n        ) : (<></>),\n        endAdornment: props.endAdornmentIcon ? (\n          <InputAdornment\n            className={props.endAdornmentClass ? props.endAdornmentClass : classes.endAdornment}\n            position=\"end\"\n          >\n            {props.endAdornmentIcon}\n          </InputAdornment>\n        ) : (<></>),\n        className: classes.input,\n      }}\n    />\n  );\n});\n\nFormInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  startAdornmentClass: PropTypes.string,\n  startAdornmentIcon: PropTypes.object,\n  endAdornmentClass: PropTypes.string,\n  endAdornmentIcon: PropTypes.object,\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n};\n\nFormInput.defaultProps = {\n  type: \"text\",\n  required: false,\n  autoFocus: false,\n  autoComplete: false,\n  variant: \"outlined\",\n  fullWidth: true,\n  label: \"\",\n  size: \"small\",\n  margin: \"dense\",\n  className: null,\n  placeholder: \"\",\n  startAdornmentClass: null,\n  endAdornmentClass: null,\n  disabled: false,\n  error: \"\",\n};\n\n\n\nconst FormButton = React.memo((props) => {\n  const styles = theme => ({\n    button: {\n      margin: theme.spacing(1, 0, 0, 0),\n      textTransform: \"none\",\n      fontSize: \"1.3em\",\n      color: \"white\",\n      backgroundColor: theme.palette.success.main,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.success.main, -25),\n      },\n    },\n    buttonSecondary: {\n      margin: theme.spacing(1, 0, 0, 0),\n      textTransform: \"none\",\n      fontSize: \"1em !important\",\n      color: \"white\",\n      backgroundColor: theme.palette.secondary.dark + \" !important\",\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.secondary.dark, -25)  + \" !important\",\n      },\n    },\n    buttonFederated: {\n      margin: theme.spacing(1, 0, 0, 0),\n      justifyContent: \"flex-start\",\n      paddingLeft: theme.spacing(5),\n      fontSize: \"1.3em\",\n    },  \n    buttonFederatedFacebook: {\n      backgroundColor: theme.palette.socialButtons.facebook.backgroundColor,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.socialButtons.facebook.backgroundColor, -25),\n      },\n    },\n    buttonFederatedGoogle: {\n      backgroundColor: theme.palette.socialButtons.google.backgroundColor,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.socialButtons.google.backgroundColor, -25),\n      },\n    },\n  \n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <Button\n      fullWidth={props.fullWidth}\n      variant={props.variant}\n      color={props.color}\n      size={props.size}\n      className={`${classes.button} ${props.social ? classes.buttonFederated : \"\"} ${props.social ? classes[\"buttonFederated\" + capitalize(props.social)] : \"\"} ${classes[props.className]}`}\n      startIcon={props.startIcon}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </Button>\n  );\n});\n\nFormButton.propTypes = {\n  social: PropTypes.oneOf([\n    \"Facebook\",\n    \"Google\",\n  ]),\n}\n\nFormButton.defaultProps = {\n  fullWidth: true,\n  variant: \"contained\",\n  color: \"primary\",\n  social: null,\n};\n\n\n\nconst FormCheckbox = React.memo((props) => {\n  const styles = theme => ({\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const classNameDisabled = props.disabled ? classes.disabled : \"\";\n\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={props.checked}\n          onChange={(e) => props.onChange(e.target.checked)}\n          className={`${props.className} ${classNameDisabled}`}\n          color={props.color}\n          size={props.size}\n          disabled={props.disabled}\n        />\n      }\n      label={\n        <FormText\n          className={`${props.className} ${classNameDisabled}`}\n        >\n          {props.children}\n        </FormText>\n      }\n    />\n  );\n});\n\nFormCheckbox.propTypes = {\n};\n\nFormCheckbox.defaultProps = {\n  checked: false,\n  color: \"primary\",\n  size: \"small\",\n};\n\n\n\nconst FormText = React.memo((props) => {\n  return (\n    <Typography\n      component={props.component}\n      variant={props.variant}\n      color={props.color}\n      align={props.align}\n      {...props}\n    >\n      {props.children}\n    </Typography>\n  );\n});\n\nFormText.propTypes = {\n};\n\nFormText.defaultProps = {\n  component: \"h1\",\n  variant: \"body2\",\n  color: \"textPrimary\",\n};\n\n\n\nconst FormLink = React.memo((props) => {\n  const styles = theme => ({\n    normal: {\n      cursor: \"pointer\",\n      textDecoration: props.decoration ? props.decoration : \"none\",\n    },\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n        color: \"grey\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const className = props.disabled ? classes.disabled : classes.normal;\n\n  return (\n    <Link\n      href={props.href}\n      className={`${props.className} ${className}`}\n      color={props.color}\n      {...props}\n    >\n      {props.children}\n    </Link>\n  );\n});\n\nFormLink.propTypes = {\n};\n\nFormLink.defaultProps = {\n  color: \"textPrimary\",\n};\n\n\n\nconst FormDividerWithText = React.memo((props) => {\n  const styles = theme => ({\n    container: {\n      display: \"flex\",\n      alignItems: \"center\",\n      marginTop: theme.spacing(props.marginVertical),\n      marginBottom: theme.spacing(props.marginVertical),\n    },\n    divider: {\n      width: \"100%\",\n      borderBottom: \"1px solid \" + (props.color ? props.color : theme.palette.primary.dark),\n      paddingLeft: theme.spacing(1),\n    },\n    text: {\n      paddingLeft: theme.spacing(props.paddingHorizontal),\n      paddingRight: theme.spacing(props.paddingHorizontal),\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.divider} />\n      {props.children && <span className={classes.text}>\n        {props.children}\n      </span>}\n      <div className={classes.divider} />\n    </div>\n  );\n});\n\nFormDividerWithText.propTypes = {\n  color: PropTypes.string,\n  marginVertical: PropTypes.oneOf([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]),\n  paddingHorizontal: PropTypes.oneOf([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]),\n};\n\nFormDividerWithText.defaultProps = {\n  marginVertical: 1,\n  paddingHorizontal: 1,\n};\n\n/*\nconst FormTooltip = ({ children, ...rest }: TooltipProps) => {\n  const [renderTooltip, setRenderTooltip] = useState(false);\n\n  return (\n    <div\n      onMouseEnter={() => !renderTooltip && setRenderTooltip(true)}\n      className=\"display-contents\"\n    >\n      {!renderTooltip && children}\n      {renderTooltip && (\n        <Tooltip {...rest}>\n          <span>\n            {children}\n          </span>\n        </Tooltip>\n      )}\n    </div>\n  );\n}\n\nconst _FormTooltip = React.memo((props) => {\n  const styles = theme => ({\n    normal: {\n      cursor: \"pointer\",\n      textDecoration: props.decoration ? props.decoration : \"none\",\n    },\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n        color: \"grey\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const className = props.disabled ? classes.disabled : classes.normal;\n\n  return (\n    <Tooltip\n      placement={props.placement}\n      enterDelay={props.enterDelay}\n      leaveDelay={props.leaveDelay}\n      {...props}\n    >\n      {props.children}\n    </Tooltip>\n  );\n});\n\nFormTooltip.propTypes = {\n  placement: PropTypes.string,\n  enterDelay: PropTypes.number,\n  leaveDelay: PropTypes.number,\n};\n\nFormTooltip.defaultProps = {\n  placement: \"left\",\n  enterDelay: 500,\n  leaveDelay: 200,\n};\n*/\n\nexport {FormInput, FormButton, FormCheckbox, FormText, FormLink, FormDividerWithText/*, FormTooltip*/};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h2c0-1.66 1.34-3 3-3s3 1.34 3 3v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\"\n}), 'LockOpenOutlined');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z\"\n}), 'LockOpen');\n\nexports.default = _default;","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useModal } from \"mui-modal-provider\";\nimport { makeStyles } from \"@mui/styles\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Grid from \"@mui/material/Grid\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport LockOpenOutlined from \"@mui/icons-material/LockOpenOutlined\";\nimport ConfirmationNumber from \"@mui/icons-material/ConfirmationNumber\";\nimport Lock from \"@mui/icons-material/Lock\";\nimport LockOpen from \"@mui/icons-material/LockOpen\";\nimport { errorMessage } from \"../../libs/Misc\";\nimport AuthService from \"../../services/AuthService\";\nimport { toast } from \"../Toast\";\nimport { FormInput, FormButton, FormText, FormLink } from \"../FormElements\";\nimport { validateEmail, validatePassword } from \"../../libs/Validation\";\nimport FlexibleDialog from \"../FlexibleDialog\";\n\nconst styles = theme => ({\n  avatar: {\n    backgroundColor: theme.palette.success.main,\n  },\n  fieldset: {\n    border: 0,\n  },\n  title: {\n    width: \"100%\",\n    color: theme.palette.title.color,\n    //backgroundColor: '#ccc', //theme.palette.title.backgroundColor,\n    //borderRadius: 3,\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: 3,\n    paddingBottom: 50,\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n});\nconst useStyles = makeStyles((theme) => (styles(theme)));\n\nfunction ForgotPassword() {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmed, setPasswordConfirmed] = useState(\"\");\n  const [error, setError] = useState({ email: null, password: null, passwordConfirmed: null, code: null });\n  const [waitingForCode, setWaitingForCode] = useState(false);\n  const [codeDeliveryMedium, setCodeDeliveryMedium] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { showModal } = useModal();\n  const openDialog = (props) => showModal(FlexibleDialog, props);\n\n  const validateForm = () => { // validate email formally\n    if (!waitingForCode) {\n      if (!validateEmail(email)) {\n        const err = t(\"Please supply a valid email\");\n        toast.warning(err);\n        setError({ email: err });\n        return false;\n      }\n    }\n\n    if (waitingForCode) {\n      if (!validatePassword(password)) {\n        const err = t(\"Please supply a more complex password\");\n        toast.warning(err);\n        setError({ password: err });\n        return false;\n      }\n\n      if (!passwordConfirmed) {\n        const err = t(\"Please confirm the password\");\n        setError({ passwordConfirmed: err });\n        toast.warning(err);\n        return false;\n      }\n  \n      if (password !== passwordConfirmed) {\n        const err = t(\"The confirmed password does not match the password\");\n        toast.warning(err);\n        setError({ passwordConfirmed: err });\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const formForgotPassword = (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setError({});\n\n    AuthService.forgotPassword({email}).then(\n      (result) => {\n        if (result instanceof Error) {\n          toast.error(errorMessage(result));\n          return setError({ email: errorMessage(result)});\n        }\n        setWaitingForCode(true);\n        setPassword(\"\");\n        switch (result.codeDeliveryMedium) {\n          default: // in future we could treat EMAIL/SMS/... separately...\n            const medium = result.codeDeliveryMedium;\n            setCodeDeliveryMedium(medium);\n            openDialog({\n              title: t(\"Verification code sent\"),\n              contentText:\n                t(`Verification code sent via {{medium}} to {{email}}.`, {medium, email}) + `\\n` +\n                t(`Please copy and paste it here.`),\n                actions: [\n                  {\n                    text: t(\"Ok\"),\n                    closeModal: true,\n                    autoFocus: true,\n                    callback: console.log(\"Ok\"),\n                  },\n                ],\n            });\n        }\n      },\n    );\n  };\n  \n  const formConfirmForgotPassword = (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setError({});\n    \n    AuthService.resetPasswordConfirm({\n      email,\n      password,\n      code,\n    }).then(\n      result => {\n        if (result instanceof Error) {\nconsole.log(\"EC\", result.response.data.code, Object.keys(result), Object.values(result));\n          const code = result.response.data.code;\n          toast.error(errorMessage(result));\n          return code === \"code\" ? \n            setError({ confirmationCode: errorMessage(result) }) :\n            setError({ password: errorMessage(result) })\n          ;\n        }\n        setWaitingForCode(false);\n        setEmail(\"\");\n        setPassword(\"\");\n        setPasswordConfirmed(\"\");\n        setCode(\"\");\n        openDialog({\n          title: t(`Password reset success`),\n          contentText: t(`You can now sign in with your new password`),\n          actions: [\n            {\n              text: t(\"Ok\"),\n              autoFocus: true,\n              closeModal: true,\n              callback: () => history.push(\"/signin\"),\n            }\n          ],\n        });\n      },\n    );\n  };\n  \n  const formResendResetPasswordCode = (e) => {\n    e.preventDefault();\n    setError({});\n\n    AuthService.resendResetPasswordCode({\n      email\n    }).then(\n      result => {\n        if (result instanceof Error) {\n          setError({ confirmationCode: errorMessage(result) }); // blame confirmationCode field\n          toast.error(errorMessage(result));\n          return;\n        }\n        toast.info(`A verification code has been sent via ${result.codeDeliveryMedium} to ${email}`);\n        //toast.info(\"Code resent successfully\");\n      }\n    );\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <fieldset /*disabled={promiseInProgress}*/ className={classes.fieldset}>\n          {!waitingForCode && (\n            <>\n\n              <Box m={1} />\n\n              <Grid container justifyContent=\"center\">\n                <Avatar className={classes.avatar}>\n                  <LockOpenOutlined />\n                </Avatar>\n              </Grid>\n\n              <Box m={3} />\n\n              <Grid container justifyContent=\"flex-start\">\n                <FormText variant=\"subtitle1\" className={classes.title}>\n                  {t(\"Reset password\")}\n                </FormText>\n              </Grid>\n\n              <Box m={1} />\n\n              <FormInput\n                autoFocus\n                id={\"email\"}\n                value={email}\n                onChange={setEmail}\n                placeholder={t(\"Email\")}\n                startAdornmentIcon={<LockOpen />}\n                error={error.email}\n              />\n\n              <Box m={1} />\n\n              <FormButton\n                onClick={formForgotPassword}\n              >\n                {t(\"Request password reset\")}\n              </FormButton>\n              \n            </>\n          )}\n          {waitingForCode && (\n            <>\n\n              <FormInput\n                id={\"password\"}\n                type=\"password\"\n                value={password}\n                onChange={setPassword}\n                placeholder={t(\"New password\")}\n                startAdornmentIcon={<Lock />}\n                error={error.password}\n              />\n\n              <FormInput\n                id={\"passwordConfirmed\"}\n                type=\"password\"\n                value={passwordConfirmed}\n                onChange={setPasswordConfirmed}\n                placeholder={t(\"New password confirmation\")}\n                startAdornmentIcon={<Lock />}\n                error={error.passwordConfirmed}\n              />\n\n              <FormInput\n                id={\"confirmationCode\"}\n                type=\"number\"\n                value={code}\n                onChange={setCode}\n                placeholder={t(\"Numeric code just received by {{codeDeliveryMedium}}\", {codeDeliveryMedium})}\n                startAdornmentIcon={<ConfirmationNumber />}\n                error={error.confirmationCode}\n              />\n\n              <Box m={1} />\n\n              <FormButton\n                onClick={formConfirmForgotPassword}\n              >\n                {t(\"Confirm Password Reset\")}\n              </FormButton>\n\n              <Box m={2} />\n\n              <Grid container justifyContent=\"flex-end\">\n                <FormLink\n                  decoration=\"underline\"\n                  onClick={formResendResetPasswordCode}\n                >\n                  {t(\"Resend code\")}\n                </FormLink>\n              </Grid>\n\n            </>\n          )}\n        </fieldset>\n      </form>\n\n    </Container>\n  );\n}\n\nexport default React.memo(ForgotPassword);"],"sourceRoot":""}