{"version":3,"sources":["services/UserService.js","components/AdminPanel.js"],"names":["UserService","getProfile","api","get","then","response","data","error","updateProfile","email","password","firstName","lastName","address","fiscalCode","businessName","post","updateUserProperty","userId","propertyName","propertyValue","getAllPlans","plans","updatePlan","plan","console","log","getAllRoles","roles","updateRoles","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","getAllUsersWithFullInfo","useStyles","makeStyles","theme","root","flexGrow","datagrid","outline","borderRadius","backgroundColor","palette","tertiary","light","avatar","success","main","columnLeft","marginLeft","spacing","columnRight","marginRight","form","fieldset","border","fieldsetPersonalData","color","fontSize","borderStyle","borderColor","fieldsetCompanyData","fieldsetAddress","title","width","display","justifyContent","paddingTop","paddingBottom","paddingLeft","paddingRight","formControlSelectPlan","minWidth","formControlSelectRole","tab","secondary","tabIndicator","dark","height","styles","AdminPanelTabPanel","props","children","value","index","other","component","role","hidden","id","p","AdminPanel","classes","history","useHistory","useState","TokenService","getUser","user","users","setUsers","usersLoaded","setUsersLoaded","pageSize","setPageSize","rowsPerPageOptions","selectedRowsCount","setSelectedRowsCount","setError","t","useTranslation","tabValue","setTabValue","anyChanges","getCurrentLanguage","i18n","language","itIT","components","MuiDataGrid","defaultProps","localeText","frFR","columns","field","headerName","type","getActions","params","label","icon","onClick","e","flex","editable","preProcessEditCellProps","preProcessEditCellValidation","valueOptions","renderCell","row","property","a","Promise","resolve","reject","result","Error","toast","dismiss","warn","errorMessage","useEffect","goBack","useBeforeunload","event","preventDefault","unblock","block","location","action","window","confirm","code","message","map","flattenObject","_id","name","className","m","container","elevation","position","square","onChange","newValue","variant","indicator","rows","autoHeight","onPageSizeChange","newPageSize","pagination","checkboxSelection","disableSelectionOnClick","getRowClassName","onCellEditCommit","onSelectionChange","newSelection","onRowSelected","x","current","getSlectedRows","onSelectionModelChange","ids","selectedIDs","Set","filter","has","toString","length","rowHeight","NoRowsOverlay","alignItems","experimentalFeatures","preventCommitWhileValidating","placement","alert","React","memo"],"mappings":"+HAAA,YA6HMA,EAAc,CAClBC,WA5HiB,WACjB,OAAOC,IAAIC,IAAI,oBAAoBC,MACjC,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MAuHXC,cAlHoB,SAAC,GAA6F,IAA9EC,EAA6E,EAA7EA,MAAOC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAC/F,OAAOb,IAAIc,KAAK,sBAAuB,CAErCP,QACAC,WACAC,YACAC,WACAC,UACAC,aACAC,iBACCX,MACD,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MAoGXU,mBA/FyB,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cACjD,OAAOlB,IAAIc,KAAK,2BAA4B,CAC1CE,SACAC,eACAC,kBACChB,MACD,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MAsFXc,YAjFkB,SAAAC,GAClB,OAAOpB,IAAIC,IAAI,qBAAqBC,MAClC,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MA4EXgB,WAvEiB,SAAAC,GAEjB,OADAC,QAAQC,IAAI,qBAAsBF,GAC3BtB,IAAIc,KAAK,mBACdQ,GACApB,MACA,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MA+DXoB,YA1DkB,SAAAC,GAClB,OAAO1B,IAAIC,IAAI,qBAAqBC,MAClC,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MAqDXsB,YAhDkB,SAAAD,GAClB,OAAO1B,IAAIc,KAAK,oBACdY,GACAxB,MACA,SAAAC,GACE,OAAOA,EAASC,QAElB,SAAAC,GACE,OAAOA,MAyCXuB,iBApCuB,WACvB,OAAO5B,IAAIC,IAAI,cAoCf4B,aAjCmB,WACnB,OAAO7B,IAAIC,IAAI,eAiCf6B,kBA9BwB,WACxB,OAAO9B,IAAIC,IAAI,cA8Bf8B,cA3BoB,WACpB,OAAO/B,IAAIC,IAAI,gBA2Bf+B,wBAxB8B,WAC9B,OAAOhC,IAAIC,IAAI,iCACbC,MACA,SAACC,GACC,OAAOA,EAASC,QAElB,SAACC,GACC,OAAOA,OAoBEP,O,+aCPTmC,EAAYC,aAAW,SAACC,GAAD,OAvGd,SAAAA,GAAK,MAAK,CACvBC,KAAM,CACJC,SAAU,GAEZC,SAAU,CAER,iGAAkG,CAChGC,QAAS,QAEX,8DAA+D,CAC7DA,QAAS,QAEX,8FAA+F,CAC7FA,QAAS,QAGX,2BAA4B,CAC1BC,aAAc,EACdC,gBAAiBN,EAAMO,QAAQC,SAASC,MACxCL,QAAS,SAoBbM,OAAQ,CACNJ,gBAAiBN,EAAMO,QAAQI,QAAQC,MAEzCC,WAAY,CACVC,WAAYd,EAAMe,QAAQ,KAE5BC,YAAa,CACXF,WAAY,OACZG,YAAajB,EAAMe,QAAQ,KAE7BG,KAAM,GAENC,SAAU,CACRC,OAAQ,GAEVC,qBAAsB,CACpBC,MAAO,UACPC,SAAU,GACVH,OAAQ,EACRI,YAAa,QACbC,YAAa,UACbpB,aAAc,GAEhBqB,oBAAqB,CACnBJ,MAAO,UACPC,SAAU,GACVH,OAAQ,EACRI,YAAa,QACbC,YAAa,UACbpB,aAAc,GAEhBsB,gBAAiB,CACfL,MAAO,OACPC,SAAU,GACVH,OAAQ,EACRI,YAAa,QACbC,YAAa,OACbpB,aAAc,GAEhBuB,MAAO,CACLC,MAAO,OACPP,MAAOtB,EAAMO,QAAQqB,MAAMN,MAC3BQ,QAAS,OACTC,eAAgB,SAChBC,WAAY,EACZC,cAAe,GACfC,YAAa,GACbC,aAAc,IAEhBC,sBAAuB,CACrBC,SAAU,KAEZC,sBAAuB,CACrBD,SAAU,KAEZE,IAAK,CACHjC,gBAAiBN,EAAMO,QAAQiC,UAAU/B,OAE3CgC,aAAc,CACZnC,gBAAiBN,EAAMO,QAAQiC,UAAUE,KACzCC,OAAQ,IAI6BC,CAAO5C,MAahD,SAAS6C,EAAmBC,GAC1B,IAAQC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EAAnC,YAA6CJ,EAA7C,GAEA,OACE,cAAC,IAAD,yBACEK,UAAU,MACVC,KAAK,WACLC,OAAQL,IAAUC,EAClBK,GAAE,mCAA8BL,GAChC,oCAA4BA,IACxBC,GANN,aAQE,cAAC,IAAD,CAAKK,EAAG,EAAR,SACGR,OAYT,SAASS,EAAWV,GAClB,IArCiBG,EAqCXQ,EAAU3D,IACV4D,EAAUC,cAChB,EAAeC,mBAASC,IAAaC,WAA9BC,EAAP,oBACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAgCP,mBAAS,IAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAAwDT,mBAAS,CAAC,EAAG,GAAI,GAAI,GAAI,MAA1EU,GAAP,oBACA,GAAkDV,mBAAS,GAA3D,qBAAOW,GAAP,MAA0BC,GAA1B,MACA,GAA8BZ,oBAAS,GAArBa,GAAlB,qBACQC,GAAMC,cAAND,EACR,GAAgCd,mBAASd,EAAM8B,UAA/C,qBAAOA,GAAP,MAAiBC,GAAjB,MACA,GAAqBjB,oBAAS,GAAvBkB,GAAP,qBACA,GAAmBlB,mBAASmB,YAAmBC,MAAxCC,GAAP,qBACA,GAAqBrB,oBAAS,WAC5B,OAAQqB,IACN,IAAK,KACH,OAAOC,IAAKC,WAAWC,YAAYC,aAAaC,WAClD,IAAK,KACH,OAAOC,IAAKJ,WAAWC,YAAYC,aAAaC,WAClD,QACE,OAAO,SAPNA,GAAP,qBAUME,GAAwB,CAC5B,CACEC,MAAO,UACPC,WAAYhB,GAAE,WACdiB,KAAM,UACN9D,MAAO,GACP+D,WAAY,SAACC,GAAD,MAA2B,CACrC,cAAC,IAAD,CACEC,MAAOpB,GAAE,UACTqB,KAAM,cAAC,IAAD,IACNC,QAAS,SAACC,GAAO7G,QAAQC,IAAI,SAAU4G,MAEzC,cAAC,IAAD,CACEH,MAAOpB,GAAE,gBACTqB,KAAM,cAAC,IAAD,IACNC,QAAS,SAACC,GAAO7G,QAAQC,IAAI,eAAgB4G,SAWnD,CACER,MAAO,YACPC,WAAYhB,GAAE,cACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,YAAaR,KAE/E,CACEJ,MAAO,WACPC,WAAYhB,GAAE,aACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,WAAYR,KAE9E,CACEJ,MAAO,QACPC,WAAYhB,GAAE,SACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,QAASR,KAE3E,CACEJ,MAAO,eACPC,WAAYhB,GAAE,iBACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,eAAgBR,KAElF,CACEJ,MAAO,aACPC,WAAYhB,GAAE,eACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,aAAcR,KAEhF,CACEJ,MAAO,QACPC,WAAYhB,GAAE,QACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EAGVR,KAAM,eACNW,aAAc,CAAC,OAAQ,UAEzB,CACEb,MAAO,OACPC,WAAYhB,GAAE,QACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EASVR,KAAM,eACNW,aAAc,CAAC5B,GAAE,QAASA,GAAE,YAAaA,GAAE,eAE7C,CACEe,MAAO,gBACPC,WAAYhB,GAAE,UACdrC,SAAU,IACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,gBAAiBR,KAwBnF,CACEJ,MAAO,mBACPC,WAAYhB,GAAE,SACdrC,SAAU,GACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,mBAAoBR,IACpFU,WAAY,SAACV,GAAD,OAAYA,EAAOW,IAAI,sBAErC,CACEf,MAAO,eACPC,WAAYhB,GAAE,QACdrC,SAAU,GACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,eAAgBR,IAChFU,WAAY,SAACV,GAAD,OAAYA,EAAOW,IAAI,kBAErC,CACEf,MAAO,cACPC,WAAYhB,GAAE,OACdrC,SAAU,GACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,cAAeR,IAC/EU,WAAY,SAACV,GAAD,OAAYA,EAAOW,IAAI,iBAErC,CACEf,MAAO,mBACPC,WAAYhB,GAAE,OACdrC,SAAU,GACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,mBAAoBR,IACpFU,WAAY,SAACV,GAAD,OAAYA,EAAOW,IAAI,sBAErC,CACEf,MAAO,kBACPC,WAAYhB,GAAE,WACdrC,SAAU,GACV6D,KAAM,EACNC,UAAU,EACVC,wBAAyB,SAAAP,GAAM,OAAIQ,GAA6B,kBAAmBR,IACnFU,WAAY,SAACV,GAAD,OAAYA,EAAOW,IAAI,sBAQjCH,GAA4B,uCAAG,WAAMI,EAAUZ,GAAhB,SAAAa,EAAA,6DACvCtH,QAAQC,IAAI,qDAAsDoH,EAAUZ,GADrC,kBAE5B,IAAIc,SAAQ,SAACC,EAASC,GAC3B,OAAOlJ,IAAYiB,mBAAmB,CACpCC,OAAQgH,EAAOvC,GACfxE,aAAc2H,EACd1H,cAAe8G,EAAO/C,MAAME,QAC3BjF,MACD,SAAA+I,GACMA,aAAkBC,OACpBC,IAAMC,UACND,IAAME,KAAKC,YAAaL,IACxBD,EAAO,2BAAIhB,EAAO/C,OAAZ,IAAmB5E,OAAO,OAG5CkB,QAAQC,IAAI,2CAA4CyH,GAC5CjB,EAAO/C,MAAME,MAAQ8D,EAAO/H,cAC5B6H,EAAQ,2BAAIf,EAAO/C,OAAZ,IAAmB5E,OAAO,aAjBN,2CAAH,wDA+FlC,OA9DAkJ,qBAAU,WACJ,OAACrD,QAAD,IAACA,KAAMT,KACT0D,IAAM9I,MAAMwG,GAAE,+BACdhB,EAAQ2D,YAET,QAACtD,QAAD,IAACA,OAAD,EAACA,EAAMT,GAAII,EAASgB,KAGvB4C,aAAgB,SAACC,GACXzC,IACFyC,EAAMC,oBAKVJ,qBAAU,WACR,IAAMK,EAAU/D,EAAQgE,OAAM,SAACC,EAAUC,GACvC,OAAI9C,IACK+C,OAAOC,QAAQpD,GAAE,4CAK5B,OAAO,WACL+C,OAED,CAAC3C,GAAYpB,EAASgB,KAGzB0C,qBAAU,WACRzJ,IAAYkC,0BAA0B9B,MACpC,SAAA+I,GACE,GAAIA,aAAkBC,MAEpB,OADA3H,QAAQlB,MAAM,iCAAkC4I,GACzCrC,GAAS,CAAEsD,KAAMjB,EAAOkB,UAEjC5I,QAAQC,IAAR,4CAAyDyH,EAAO9C,OAEhE8C,EAAO9C,MAAQ8C,EAAO9C,MAAMiE,KAAI,SAAAlE,GAAI,kCAE/BmE,YAAcnE,EAAM,YAFW,IAGlCT,GAAIS,EAAKoE,IACThJ,KAAM4E,EAAK5E,KAAKiJ,KAChB7I,MAAOwE,EAAKxE,MAAM,GAAG6I,UAW/BhJ,QAAQC,IAAR,6DAA0EyH,EAAO9C,OACzEC,EAAS6C,EAAO9C,OAChBG,GAAe,QAGlB,QAACJ,QAAD,IAACA,OAAD,EAACA,EAAMT,GAAImB,GAAUC,KAE1BtF,QAAQC,IAAI,SAAU2E,GAElB,qBAAKqE,UAAW5E,EAAQxD,KAAxB,SAEE,eAAC,IAAD,eAEE,cAAC,IAAD,CAAKqI,EAAG,IAER,cAAC,IAAD,CAAMC,WAAS,EAACxG,eAAe,SAA/B,SACE,cAAC,IAAD,CAAQsG,UAAW5E,EAAQ/C,OAA3B,SACE,cAAC,IAAD,QAIJ,cAAC,IAAD,CAAK4H,EAAG,IAER,cAAC,IAAD,CAAQE,UAAW,EAAGC,SAAS,SAA/B,SACE,cAAC,IAAD,CAAOD,UAAW,EAAGE,QAAM,EAA3B,SACE,cAAC,IAAD,CACE1F,MAAO4B,GACP+D,SAtHiB,SAACpB,EAAOqB,GACnC/D,GAAY+D,IAsHFC,QAAQ,WACR,aAAW,6BACXpF,QAAS,CACPqF,UAAWrF,EAAQhB,cAErB4F,UAAW5E,EAAQlB,IARrB,SAUE,cAAC,IAAD,aACEuD,MAAOpB,GAAE,WAtWNzB,EAuWW,EAtWrB,CACLK,GAAG,cAAD,OAAgBL,GAClB,gBAAgB,mBAAhB,OAAoCA,aA0WhC,eAACJ,EAAD,CAAoBG,MAAO4B,GAAU3B,MAtWpB,EAsWjB,UAOE,cAAC,IAAD,CAAKqF,EAAG,IAER,cAAC,IAAD,CACES,KAAM/E,EACNwB,QAASA,GACTF,WAAYA,GACZ0D,YAAU,EACV5E,SAAUA,EACV6E,iBAAkB,SAACC,GAAD,OAAiB7E,EAAY6E,IAC/C5E,mBAAoBA,GACpB6E,YAAU,EACVC,mBAAiB,EACjBC,yBAAuB,EACvBhB,UAAW5E,EAAQtD,SACnBmJ,gBAAiB,iBAAM,yBAEvBC,iBAAkB,SAAC1D,GAhI3BmB,IAAMrG,QAAQ+D,GAAE,mBAoIR8E,kBAAmB,SAAAC,IAjIH,SAAAA,GACxBrK,QAAQ8H,KAAKuC,EAAaV,KAAO,mBAiIvBS,CAAkBC,IAEpBC,cAAe,SAAAC,GAAC,OAAIvK,QAAQ8H,KAAKyC,EAAE9L,IAAI+L,QAAQC,iBAAmB,oBAClEC,uBAAwB,SAAAC,GACtB,IAAMC,EAAc,IAAIC,IAAIF,GAC5BvF,GAAqBR,EAAMkG,QAAO,SAAAnG,GAAI,OAAIiG,EAAYG,IAAIpG,EAAKT,GAAG8G,eAAaC,SAEjFC,UAAW,GAIXnF,WAAY,CACVoF,cAAe,kBACb,cAAC,IAAD,CAAO5H,OAAO,OAAO6H,WAAW,SAASzI,eAAe,SAAxD,SACGmC,EAAcQ,GAAE,kBAAoBA,GAAE,WAAa,UAU1D+F,qBAAsB,CACpBC,8BAA8B,KAKlC,cAAC,IAAD,CAAKpC,EAAG,IAEN/D,GAAoB,GACpB,gCACE,cAAC,IAAD,CACE3C,MAAO8C,GAAE,6BACTiG,UAAU,MAFZ,SAIE,cAAC,IAAD,CAAY,aAAW,4BAA4B3E,QAAS,kBAAM4E,MAAM,2BAAxE,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,CACEhJ,MAAO8C,GAAE,uCACTiG,UAAU,MAFZ,SAIE,cAAC,IAAD,CAAkC,aAAW,sCAAsC3E,QAAS,kBAAM4E,MAAM,2BAAxG,SACE,cAAC,IAAD,mBAkBlBpH,EAAW6B,aAAe,CACxBT,SApcuB,GAycViG,cAAMC,KAAKtH","file":"static/js/18.6b5eca68.chunk.js","sourcesContent":["import api from \"./API\";\n\nconst getProfile = () => {\n  return api.get(\"/user/getProfile\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateProfile = ({/*username, */email, password, firstName, lastName, address, fiscalCode, businessName}) => {\n  return api.post(\"/user/updateProfile\", {\n    //username,\n    email,\n    password,\n    firstName,\n    lastName,\n    address,\n    fiscalCode,\n    businessName,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateUserProperty = ({userId, propertyName, propertyValue}) => {\n  return api.post(\"/user/updateUserProperty\", {\n    userId,\n    propertyName,\n    propertyValue,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getAllPlans = plans => {\n  return api.get(\"/user/getAllPlans\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updatePlan = plan => {\n  console.log(\"updatePlan - plan:\", plan);\n  return api.post(\"/user/updatePlan\",\n    plan,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getAllRoles = roles => {\n  return api.get(\"/user/getAllRoles\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateRoles = roles => {\n  return api.post(\"/user/updateRoles\",\n    roles,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getPublicContent = () => {\n  return api.get(\"/test/all\");\n};\n\nconst getUserBoard = () => {\n  return api.get(\"/test/user\");\n};\n\nconst getModeratorBoard = () => {\n  return api.get(\"/test/mod\");\n};\n\nconst getAdminBoard = () => {\n  return api.get(\"/test/admin\");\n};\n\nconst getAllUsersWithFullInfo = () => {\n  return api.get(\"/user/getAllUsersWithFullInfo\"\n  ).then(\n    (response) => {\n      return response.data;\n    },\n    (error) => {\n      return error;\n    }\n  );\n};\n\nconst UserService = {\n  getProfile,\n  updateProfile,\n  updateUserProperty,\n  getAllPlans,\n  updatePlan,\n  getAllRoles,\n  updateRoles,\n  getPublicContent,\n  getUserBoard,\n  getModeratorBoard,\n  getAdminBoard,\n  getAllUsersWithFullInfo,\n};\n\nexport default UserService;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useBeforeunload } from \"react-beforeunload\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Paper from '@mui/material/Paper';\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Typography from \"@mui/material/Typography\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Grid from \"@mui/material/Grid\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport { IconButton } from \"@mui/material\";\nimport { Tooltip } from \"@mui/material\";\nimport { DataGrid, itIT, frFR, GridColDef, GridActionsCellItem } from \"@mui/x-data-grid\";\nimport IconAvatar from \"@mui/icons-material/Security\";\nimport IconDelete from \"@mui/icons-material/Delete\";\nimport IconForceLogout from \"@mui/icons-material/Lock\";\nimport i18n from \"i18next\";\nimport { errorMessage, flattenObject } from \"../libs/Misc\";\nimport UserService from \"../services/UserService\";\nimport TokenService from \"../services/TokenService\";\nimport { getCurrentLanguage } from \"../libs/I18n\";\nimport { toast } from \"./Toast\";\n//import config from \"../config\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  datagrid: {\n    // disable data-grid outlines\n    \"&.MuiDataGrid-root .MuiDataGrid-columnHeader:focus, &.MuiDataGrid-root .MuiDataGrid-cell:focus\": {\n      outline: \"none\",\n    },\n    \"& .MuiDataGrid-cell:focus-within, & .MuiDataGrid-cell:focus\": {\n      outline: \"none\",\n    },\n    \"& .MuiDataGrid-columnHeaderCheckbox:focus-within, & .MuiDataGrid-columnHeaderCheckbox:focus\": {\n      outline: \"none\",\n    },\n\n    \"& .adminpanel-table--row\": {\n      borderRadius: 1, //defaultBorderRadius,\n      backgroundColor: theme.palette.tertiary.light,\n      outline: \"none\",\n    },\n    // \"& .adminpanel-table--cell\": {\n    //   border: \"none\",\n    //   outline: \"none\",\n    // },\n    // \"&.MuiDataGrid-root .MuiDataGrid-columnHeader:focus, &.MuiDataGrid-root .MuiDataGrid-cell:focus, &.MuiDataGrid-root .MuiDataGrid-cellCheckbox:focus, &.MuiDataGrid-root .MuiDataGrid-sortIcon:focus\": {\n    //   outline: \"none\",\n    // },\n    // \"&.MuiCheckbox-root .MuiDataGrid-cellCheckbox:focus\": {\n    //   outline: \"none !important\",\n    // },\n    // \"& .MuiDataGrid-columnHeader,  .MuiDataGrid-cell,  .MuiDataGrid-cellCheckbox\":\n    //     {\n    //       border: 0,\n    //       \"& :focus-within\": {\n    //         outline: \"none\"\n    //       }\n    //     },\n  },\n  avatar: {\n    backgroundColor: theme.palette.success.main,\n  },\n  columnLeft: {\n    marginLeft: theme.spacing(0.2),\n  },\n  columnRight: {\n    marginLeft: \"auto\",\n    marginRight: theme.spacing(0.2),\n  },\n  form: {\n  },\n  fieldset: {\n    border: 0,\n  },\n  fieldsetPersonalData: {\n    color: \"#758c75\",\n    fontSize: 13,\n    border: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#758c75\",\n    borderRadius: 5,\n  },\n  fieldsetCompanyData: {\n    color: \"#7a7aa5\",\n    fontSize: 13,\n    border: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#7a7aa5\",\n    borderRadius: 5,\n  },\n  fieldsetAddress: {\n    color: \"#aaa\",\n    fontSize: 13,\n    border: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#aaa\",\n    borderRadius: 5,\n  },\n  title: {\n    width: \"100%\",\n    color: theme.palette.title.color,\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: 3,\n    paddingBottom: 50,\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n  formControlSelectPlan: {\n    minWidth: 200,\n  },\n  formControlSelectRole: {\n    minWidth: 200,\n  },\n  tab: {\n    backgroundColor: theme.palette.secondary.light,\n  },\n  tabIndicator: {\n    backgroundColor: theme.palette.secondary.dark,\n    height: 1,\n  },\n});\n\nconst useStyles = makeStyles((theme) => (styles(theme)));\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst ADMINPANEL_USERS = 0;\n\n\n\nfunction AdminPanelTabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`nav-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>\n        {children}\n      </Box>\n    </Typography>\n  );\n}\n\nAdminPanelTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction AdminPanel(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [user] = useState(TokenService.getUser());\n  const [users, setUsers] = useState([]);\n  const [usersLoaded, setUsersLoaded] = useState(false);\n  const [pageSize, setPageSize] = useState(10);\n  const [rowsPerPageOptions/*, setRowsPerPageOptions*/] = useState([5, 10, 20, 50, 100]);\n  const [selectedRowsCount, setSelectedRowsCount] = useState(0);\n  const [/*error*/, setError] = useState(false);\n  const { t } = useTranslation();\n  const [tabValue, setTabValue] = useState(props.tabValue);\n  const [anyChanges] = useState(false);\n  const [language] = useState(getCurrentLanguage(i18n));\n  const [localeText] = useState(() => { /* use current language for MuiDataGrid locale text */\n    switch (language) {\n      case \"it\":\n        return itIT.components.MuiDataGrid.defaultProps.localeText;\n      case \"fr\":\n        return frFR.components.MuiDataGrid.defaultProps.localeText;\n      default:\n        return null; // use default language for MuiDataGrid locale text\n    }\n  });\n  const columns: GridColDef[] = [\n    {\n      field: 'actions',\n      headerName: t(\"Actions\"),\n      type: 'actions',\n      width: 90,\n      getActions: (params: GridRowParams) => [\n        <GridActionsCellItem\n          label={t(\"Delete\")}\n          icon={<IconDelete />}\n          onClick={(e) => {console.log(\"DELETE\", e)}}\n        />,\n        <GridActionsCellItem\n          label={t(\"Force logout\")}\n          icon={<IconForceLogout />}\n          onClick={(e) => {console.log(\"FORCE LOGOUT\", e)}}\n        />,\n      ],\n    },\n    // {\n    //   field: \"id\",\n    //   headerName: \"ID\",\n    //   minWidth: 350,\n    //   editable: false,\n    //   sortable: false,\n    // },\n    {\n      field: \"firstName\",\n      headerName: t(\"First Name\"),\n      minWidth: 100,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"firstName\", params),\n    },\n    {\n      field: \"lastName\",\n      headerName: t(\"Last Name\"),\n      minWidth: 120,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"lastName\", params),\n    },\n    {\n      field: \"email\",\n      headerName: t(\"Email\"),\n      minWidth: 240,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"email\", params),\n    },\n    {\n      field: \"businessName\",\n      headerName: t(\"Business name\"),\n      minWidth: 150,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"businessName\", params),\n    },\n    {\n      field: \"fiscalCode\",\n      headerName: t(\"Fiscal code\"),\n      minWidth: 180,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"fiscalCode\", params),\n    },\n    {\n      field: \"roles\",\n      headerName: t(\"Role\"),\n      minWidth: 170,\n      flex: 1,\n      editable: true,\n      // valueGetter: (params: GridValueGetterParams) =>\n      //   `${params.row.roles.map(role => role.name).join(\", \") || \"\"}`,\n      type: \"singleSelect\",\n      valueOptions: [\"user\", \"admin\"], // NEWFEATURE: read from server\n    },\n    {\n      field: \"plan\",\n      headerName: t(\"Plan\"),\n      minWidth: 150,\n      flex: 1,\n      editable: true,\n      // valueGetter: (params: GridValueGetterParams) => {\n      //   console.log(\"plan valueGetter\", params);\n      //   return _t(params.row.plan.name) || t(\"free\");\n      // },\n      // valueSetter: (params: GridValueSetterParams) => {\n      //   console.log(\"plan valueSetter\", params);\n      //   return { ...params.row, plan: { ...params.row.plan, name: _t(params.value) || t(\"free\") }};\n      // },\n      type: \"singleSelect\",\n      valueOptions: [t(\"free\"), t(\"standard\"), t(\"unlimited\")], // NEWFEATURE: read from server\n    },\n    {\n      field: \"addressStreet\",\n      headerName: t(\"Street\"),\n      minWidth: 180,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"addressStreet\", params),\n    },\n    // {\n    //   field: \"addressstreet\",\n    //   headerName: t(\"Street\"),\n    //   minWidth: 180,\n    //   flex: 1,\n    //   editable: true,\n    //   preProcessEditCellProps: params => preProcessEditCellValidation(\"addressstreet\", params),\n    //   // valueGetter: (params: GridValueGetterParams) =>\n    //   //   `${params.row.address?.street || \"\"}`,\n    //   //valueFormatter: params => {console.log(\"£££££££££££\", params); return params.row?.address?.street},\n    //   // valueGetter: (params) => {\n    //   //   console.log({ params });\n    //   //   return params?.row?.address?.street ? params.row.address.street : \"NOSTREET\";\n    //   // },\n    //   // valueSetter: (params) => {\n    //   //   console.log({ params });\n    //   //   return params?.row;\n    //   // },\n    //   //valueGetter: params => params.row[\"address.street\"],\n    //   //valueSetter: params => params.row,\n    //   //renderCell: params => params.row[\"address_street\"],\n    // },\n    {\n      field: \"address.streetNo\",\n      headerName: t(\"N°\"),\n      minWidth: 50,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"address.streetNo\", params),\n      renderCell: (params) => params.row[\"address.streetNo\"],\n    },\n    {\n      field: \"address.city\",\n      headerName: t(\"City\"),\n      minWidth: 90,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"address.city\", params),\n      renderCell: (params) => params.row[\"address.city\"],\n    },\n    {\n      field: \"address.zip\",\n      headerName: t(\"ZIP\"),\n      minWidth: 70,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"address.zip\", params),\n      renderCell: (params) => params.row[\"address.zip\"],\n    },\n    {\n      field: \"address.province\",\n      headerName: t(\"Pr.\"),\n      minWidth: 50,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"address.province\", params),\n      renderCell: (params) => params.row[\"address.province\"],\n    },\n    {\n      field: \"address.country\",\n      headerName: t(\"Country\"),\n      minWidth: 80,\n      flex: 1,\n      editable: true,\n      preProcessEditCellProps: params => preProcessEditCellValidation(\"address.country\", params),          \n      renderCell: (params) => params.row[\"address.country\"],\n    },\n  ];\n  \n  const handleChangeTabValue = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  \n  const preProcessEditCellValidation = async(property, params) => {\nconsole.log(\"*** preProcessEditCellValidation property, params:\", property, params);\n    return new Promise((resolve, reject) => {\n      return UserService.updateUserProperty({\n        userId: params.id,\n        propertyName: property,\n        propertyValue: params.props.value,\n      }).then(\n        result => {\n          if (result instanceof Error) {\n            toast.dismiss(); // avoid too high toasts stack\n            toast.warn(errorMessage(result));\n            reject({...params.props, error: true});\n          } else {\n            //toast.success(result.message);\nconsole.log(\"*** preProcessEditCellValidation result:\", result);\n            params.props.value = result.propertyValue; // update value if normalized serverside\n            resolve({...params.props, error: false});\n          }\n        },\n      )\n    });\n  };\n\n  const onCellEditCommit = (params) => {\n    toast.success(t(\"Field updated\"));\n  }\n\n  const onSelectionChange = newSelection => {\n    console.warn(newSelection.rows + \" selected users\");\n  };\n\n  // check user is authenticated\n  useEffect(() => {\n    if (!user?.id) {\n      toast.error(t(\"User must be authenticated\"));\n      history.goBack();\n    }\n  }, [user?.id, history, t]);\n  \n  // avoid page unload when unsaved changes present\n  useBeforeunload((event) => {\n    if (anyChanges) {\n      event.preventDefault();\n    }\n  });\n  \n  // avoid history route change when unsaved changes present\n  useEffect(() => {\n    const unblock = history.block((location, action) => {\n      if (anyChanges) {\n        return window.confirm(t(\"Are you sure to ignore unsaved data?\"));\n      }\n      return true;\n    });\n  \n    return () => {\n      unblock();\n    };\n  }, [anyChanges, history, t]);\n  \n  // get user profile on load\n  useEffect(() => {\n    UserService.getAllUsersWithFullInfo().then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"getAllUsersWithFullInfo error:\", result);\n          return setError({ code: result.message });\n        }\n        console.log(`getAllUsersWithFullInfo got successfully:`, result.users);\n\n        result.users = result.users.map(user => ({\n          //...user,\n          ...flattenObject(user, \"address\"), // user with flattened address\n          id: user._id, // copy _id to id, a requiste of DataGrid\n          plan: user.plan.name, // flatten plan\n          roles: user.roles[0].name, // get the first role only (\"default\" role), we don't yet use multiple select here...\n        }));\n\n        // DEBUG ONLY: multiplicate users\n        // if (result.users.length >= 3) {\n        //   for (var i = 0; i < 36; i++) {\n        //     result.users.push(JSON.parse(JSON.stringify(result.users[i%3])));\n        //     result.users[result.users.length-1].id = result.users[result.users.length-1].id  + \"-\" + Math.floor(Math.random() * 999999999);\n        //   }\n        // }\n\nconsole.log(`getAllUsersWithFullInfo got successfully after flattening:`, result.users);\n        setUsers(result.users); // we have to update local state outside this useEffect, otherwise there is a really long delay in each set function...\n        setUsersLoaded(true); // to distinguish an empty users set and a grid not yet loaded\n      }\n    );\n  }, [user?.id, setError, t]);\n  \nconsole.log(\"USERS:\", users);\n  return (\n    <div className={classes.root}>\n\n      <Container> {/* maxWidth=\"sm\"*/}\n\n        <Box m={1} />\n\n        <Grid container justifyContent=\"center\">\n          <Avatar className={classes.avatar}>\n            <IconAvatar />\n          </Avatar>\n        </Grid>\n\n        <Box m={3} />\n\n        <AppBar elevation={0} position=\"static\">\n          <Paper elevation={1} square>\n            <Tabs\n              value={tabValue}\n              onChange={handleChangeTabValue}\n              variant=\"standard\"\n              aria-label=\"tabs administrator's panel\"\n              classes={{\n                indicator: classes.tabIndicator\n              }}\n              className={classes.tab}\n              >\n              <Tab\n                label={t(\"Users\")}\n                {...a11yProps(0)}\n              />\n            </Tabs>\n          </Paper>\n        </AppBar>\n\n        <AdminPanelTabPanel value={tabValue} index={ADMINPANEL_USERS}>\n      \n          {/* <form className={classes.form} noValidate autoComplete=\"off\">\n            <fieldset className={classes.fieldset}>\n            </fieldset>\n          </form> */}\n\n          <Box m={3} />\n\n          <DataGrid\n            rows={users}\n            columns={columns}\n            localeText={localeText}\n            autoHeight\n            pageSize={pageSize}\n            onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\n            rowsPerPageOptions={rowsPerPageOptions}\n            pagination\n            checkboxSelection\n            disableSelectionOnClick\n            className={classes.datagrid}\n            getRowClassName={() => \"adminpanel-table--row\"}\n\n            onCellEditCommit={(params: GridCellEditStopParams) => {\n              onCellEditCommit(params);\n            }}\n\n            onSelectionChange={newSelection => {\n              onSelectionChange(newSelection);\n            }}\n            onRowSelected={x => console.warn(x.api.current.getSlectedRows() + \" selected users\")}\n            onSelectionModelChange={ids => {\n              const selectedIDs = new Set(ids);\n              setSelectedRowsCount(users.filter(user => selectedIDs.has(user.id.toString())).length);\n            }}\n            rowHeight={40}\n            /* available only in the PRO version...\n              initialState={{ pinnedColumns: { / *left: ['name'],* / right: ['actions'] }}}\n            */\n            components={{\n              NoRowsOverlay: () => (\n                <Stack height=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n                  {usersLoaded ? t(\"No users found\") : t(\"Loading\") + \"...\"}\n                </Stack>\n              ),\n              // this does not seem to be working...\n              // NoResultsOverlay: () => (\n              //   <Stack height=\"100%\" alignItems=\"center\" justifyContent=\"center\">\n              //     Local filter returns no result\n              //   </Stack>\n              // )\n            }}\n            experimentalFeatures={{\n              preventCommitWhileValidating: true,\n              //newEditingApi: true,\n            }}\n          />\n\n          <Box m={3} />\n\n          {(selectedRowsCount > 0) && (\n            <div>\n              <Tooltip\n                title={t(\"Delete all selected users\")}\n                placement=\"top\"\n              >\n                <IconButton aria-label=\"delete all selected users\" onClick={() => alert(\"delete all selected...\")}>\n                  <IconDelete />\n                </IconButton>\n              </Tooltip>\n              <Tooltip\n                title={t(\"Force logout for all selected users\")}\n                placement=\"top\"\n              >\n                <IconButton /*color=\"secondary\"*/ aria-label=\"force logout for all selected users\" onClick={() => alert(\"logout all selected...\")}>\n                  <IconForceLogout />\n                </IconButton>\n              </Tooltip>\n            </div>\n          )}\n\n        </AdminPanelTabPanel>\n\n      </Container>\n\n    </div>\n  );\n}\n\nAdminPanel.propTypes = {\n  tabValue: PropTypes.number,\n};\n\nAdminPanel.defaultProps = {\n  tabValue: ADMINPANEL_USERS,\n};\n\n\n\nexport default React.memo(AdminPanel);\n"],"sourceRoot":""}