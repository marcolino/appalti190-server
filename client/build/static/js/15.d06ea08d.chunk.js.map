{"version":3,"sources":["components/FlexibleDialog.js","services/JobService.js","libs/Styling.js","components/FormElements.js","services/UserService.js","assets/images/SelectedPlan-en.png","assets/images/SelectedPlan-it.png","assets/images/SelectedPlan-fr.png","components/Pricing.js","services/PaymentService.js","components/auth/Profile.js"],"names":["FlexibleDialog","title","contentText","actions","props","onBackdropClick","onClose","event","reason","map","action","index","onClick","callback","closeModal","variant","autoFocus","style","textTransform","text","defaultProps","React","memo","get","a","TokenService","getUser","api","JobService","set","job","put","upload","file","formData","FormData","append","post","headers","transformXls2Xml","filePath","validateXml","transform","outcomeCheck","anno","codiceFiscaleAmministrazione","outcomeFailureDetails","urlExistenceAndMatch","url","fileToMatch","console","log","getPlans","shadeColor","color","amount","replace","Math","min","max","parseInt","toString","substr","FormInput","classes","makeStyles","theme","startAdornment","backgroundColor","height","maxHeight","marginLeft","marginRight","paddingLeft","paddingRight","borderRight","endAdornment","borderLeft","textField","useStyles","TextField","id","type","value","required","autoComplete","fullWidth","label","size","margin","className","placeholder","onChange","e","target","disabled","error","isEmptyObject","InputProps","startAdornmentIcon","InputAdornment","startAdornmentClass","position","endAdornmentIcon","endAdornmentClass","input","FormButton","button","spacing","fontSize","palette","success","main","buttonSecondary","secondary","dark","buttonFederated","justifyContent","buttonFederatedFacebook","socialButtons","facebook","buttonFederatedGoogle","google","styles","Button","social","capitalize","startIcon","children","cursor","textDecoration","classNameDisabled","FormControlLabel","control","Checkbox","checked","FormText","Typography","component","align","FormLink","normal","decoration","Link","href","FormDividerWithText","container","display","alignItems","marginTop","marginVertical","marginBottom","divider","width","borderBottom","primary","paddingHorizontal","UserService","getProfile","then","response","data","updateProfile","email","password","firstName","lastName","address","fiscalCode","businessName","updateUserProperty","userId","propertyName","propertyValue","plans","updatePlan","plan","getRoles","roles","updateRoles","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","getAdminPanel","section","cardHeader","paddingTop","cardHeaderActive","cardHeaderTest","paddingBottom","cardTest","borderRadius","fontWeight","padding","card","transition","border","boxShadow","cardActive","cardActiveImage","maxWidth","opacity","zIndex","cardHr","Pricing","t","useTranslation","showModal","useModal","useState","perMonth","setPerMonth","currentPlan","setPlan","setPlans","useEffect","result","toast","errorMessage","isActivePlan","p","name","getCurrentLanguage","i18n","language","selectedPlanImage","SelectedPlanImage_en","SelectedPlanImage_it","SelectedPlanImage_fr","Container","Box","py","textAlign","mb","gutterBottom","pricePerMonth","pricePerYear","Switch","Grid","item","xs","md","length","src","alt","Card","join","CardHeader","titleTypographyProps","paymentMode","CardContent","px","currencyISO4217ToSymbol","priceCurrency","cigsCountAllowedllowed","Number","MAX_SAFE_INTEGER","cigs","supportTypes","supportType","openDialog","onPlanSelected","canForcePlan","mt","onPlanForced","mode","createCheckoutSession","product","PaymentService","root","flexGrow","avatar","columnLeft","columnRight","form","fieldset","fieldsetPersonalData","borderStyle","borderColor","fieldsetCompanyData","fieldsetAddress","formControlSelectPlan","minWidth","formControlSelectRole","tab","light","tabIndicator","a11yProps","ProfileTabPanel","other","role","hidden","Profile","history","useHistory","user","setUser","profile","setProfile","setEmail","setFirstName","setLastName","setFiscalCode","setBusinessName","setAddress","addressStreet","setAddressStreet","addressStreetNo","setAddressStreetNo","addressCity","setAddressCity","addressProvince","setAddressProvince","addressZip","setAddressZip","addressCountry","setAddressCountry","setPaymentMode","setRoles","rolesNames","setRolesNames","setError","location","state","tabValue","setTabValue","anyProfileChanges","setAnyProfileChanges","anyRolesChanges","setAnyRolesChanges","anyPlanChanges","setAnyPlanChanges","useBeforeunload","preventDefault","unblock","block","window","confirm","street","streetNo","city","province","zip","country","goBack","Error","code","message","userCanUpdateRoles","includes","userCanForcePlan","m","Avatar","AppBar","Tabs","newValue","indicator","Tab","noValidate","v","direction","columnSpacing","sm","lg","rowSpacing","session","planName","find","EventBus","dispatch","FormControl","InputLabel","Select","labelId","multiple","MenuItem","warn","String","split","every","config","rolesNamesDefault"],"mappings":"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","file":"static/js/15.d06ea08d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@mui/material/Button\";\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@mui/material';\n\nconst FlexibleDialog = ({ title, contentText, actions, ...props }) => (\n  <Dialog\n    {...props}\n    onBackdropClick={() => {} /* disable modal close on backdrop click */}\n    //disableScrollLock={false}\n    //disableEnforceFocus={false}\n    aria-labelledby={title}\n    onClose={(event, reason) => { /* console.log(\"REASON:\", reason); */ }}\n  >\n    <DialogTitle>{title}</DialogTitle>\n    <DialogContent>\n      <DialogContentText>{contentText}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      {actions.map((action, index) => (\n        <Button\n          key={index}\n          onClick={() => {\n            if (action.callback) action.callback();\n            if (action.closeModal) props.onClose();\n          }}\n          variant={action.variant === \"primary\" ? \"contained\" : action.variant === \"secondary\" ? \"outlined\" : \"contained\"}\n          autoFocus={props}\n          style={{textTransform: \"none\"}} // do not uppercase button text\n        >\n          {action.text}\n        </Button>\n      ))}\n    </DialogActions>\n  </Dialog>\n);\n\nFlexibleDialog.propTypes = {\n  title: PropTypes.string,\n  contentText: PropTypes.string,\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      closeModal: PropTypes.bool,\n      callback: PropTypes.func,\n      variant: PropTypes.oneOf([\n        \"primary\", \"secondary\",\n      ]),\n      autoFocus: PropTypes.bool,\n    })\n  ),\n};\n\nFlexibleDialog.defaultProps = {\n  title: \"\",\n  contentText: \"\",\n  actions: [\n    {\n      text: \"Ok\",\n      closeModal: true,\n      callback: () => {},\n      variant: \"primary\",\n      autoFocus: false,\n    }\n  ],\n};\n\nexport default React.memo(FlexibleDialog);","import api from \"./API\";\nimport TokenService from \"./TokenService\";\n\n// get job status\nconst get = async () => {\n  // const user = TokenService.getUser();\n  // if (!user) {\n  //   return null;\n  // }\n  // return api.get(\"/job/get\", {\n  //   userId: user._id,\n  // });\n\n  //const retval = await api.get(\"/job/get\");\n\n  const user = TokenService.getUser();\n  if (!user) {\n    return null;\n  }\n  return await api.get(\"/job/get\");\n};\n\n// set job status\nconst set = (job) => {\n  const user = TokenService.getUser();\n  if (!user) {\n    return null;\n  }\n\n  return api.put(\"/job/set\", {job});\n};\n\n// upload a file\nconst upload = (file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  \n  return api.post(\"/job/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }\n  });\n};\n\n// transform XLS to XML\nconst transformXls2Xml = (filePath) => {\n  return api.post(\"/job/transformXls2Xml/:filePath\", {\n    filePath,\n  });\n}\n\n// validate XML syntax\nconst validateXml = (transform) => {\n  return api.post(\"/job/validateXml/:transform\", {\n    transform,\n  });\n  // const retval = api.post(\"/job/validateXml/:transform\", {\n  //   transform,\n  // });\n  // console.log(\"****************** validateXml retval:\", retval);\n  // return retval;\n}\n\n// check ANAC periodic verification outcome\nconst outcomeCheck = (anno, codiceFiscaleAmministrazione) => {\n  return api.post(\"/job/outcomeCheck/:anno/:codiceFiscaleAmministrazione\",\n    {\n      anno,\n      codiceFiscaleAmministrazione,\n    }\n  );\n}\n\n// get ANAC periodic verification failed outcome details\nconst outcomeFailureDetails = (anno, codiceFiscaleAmministrazione) => {\n  return api.post(\n    \"/job/outcomeFailureDetails/anno/codiceFiscaleAmministrazione\",\n    {\n      anno,\n      codiceFiscaleAmministrazione,\n    }\n  );\n}\n\n// check url existence\nconst urlExistenceAndMatch = (url, fileToMatch) => {\nconsole.log(\"*** jobService - url,fileToMatch:\", url, fileToMatch);\n  return api.post(\n    \"/job/urlExistenceAndMatch/url/fileToMatch\",\n    {\n      url,\n      fileToMatch,\n    }\n  );\n}\n\n// // just to ignore big xml when debug printing...\n// const sanitizeJob = (job) => {\n//   if (!job?.transform?.xml) {\n//     return job;\n//   }\n//   let j = job;\n//   j.transform.xml = \"…\";\n//   return j;\n// }\n\n// get ANAC periodic verification failed outcome details\nconst getPlans = () => {\n  return api.get(\n    \"/job/getPlans\",\n  );\n}\n\nconst JobService = {\n  get,\n  set,\n  upload,\n  transformXls2Xml,\n  validateXml,\n  outcomeCheck,\n  outcomeFailureDetails,\n  urlExistenceAndMatch,\n  //sanitizeJob,\n  getPlans,\n};\n\nexport default JobService;\n","/**\n * Shade a color by an amount [-100 - 100] (negative is darker, positive is ligher).\n */\nexport const shadeColor = (color, amount) => {\n  return \"#\" + color.replace(/^#/, \"\").replace(/../g, color => (\"0\" + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));\n}\n","import React/*, { useState }*/ from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Link from \"@mui/material/Link\";\n//import Tooltip, { TooltipProps } from '@mui/material/Tooltip';\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { shadeColor } from \"../libs/Styling\";\nimport { capitalize, isEmptyObject } from \"../libs/Misc\";\n\n\n\nconst FormInput = React.memo((props) => {\n  const styles = theme => ({\n    startAdornment: {\n      backgroundColor: \"#efefff\",\n      height: \"2.5rem\",\n      maxHeight: \"3rem\",\n      marginLeft: -15,\n      marginRight: 5,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderRight: \"1px solid #c5c5c5\",\n    },\n    endAdornment: {\n      backgroundColor: \"#efefff\",\n      height: \"2.5rem\",\n      maxHeight: \"3rem\",\n      marginLeft: 5,\n      marginRight: -15,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderLeft: \"1px solid #c5c5c5\",\n    },\n    textField: {\n      backgroundColor: \"#efefff\",\n    }\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <TextField\n      id={props.id}\n      type={props.type}\n      value={props.value}\n      required={props.required}\n      autoFocus={props.autoFocus}\n      autoComplete={props.autoComplete.toString()}\n      variant={props.variant}\n      fullWidth={props.fullWidth}\n      label={props.label}\n      size={props.size}\n      margin={props.margin}\n      className={props.className ? props.className : classes.textField}\n      placeholder={props.placeholder}\n      onChange={e => props.onChange(e.target.value)}\n      disabled={props.disabled}\n      error={!isEmptyObject(props.error)}\n      InputProps={{\n        startAdornment: props.startAdornmentIcon ? (\n          <InputAdornment\n            className={props.startAdornmentClass ? props.startAdornmentClass : classes.startAdornment}\n            position=\"start\"\n          >\n            {props.startAdornmentIcon}\n          </InputAdornment>\n        ) : (<></>),\n        endAdornment: props.endAdornmentIcon ? (\n          <InputAdornment\n            className={props.endAdornmentClass ? props.endAdornmentClass : classes.endAdornment}\n            position=\"end\"\n          >\n            {props.endAdornmentIcon}\n          </InputAdornment>\n        ) : (<></>),\n        className: classes.input,\n      }}\n    />\n  );\n});\n\nFormInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  startAdornmentClass: PropTypes.string,\n  startAdornmentIcon: PropTypes.object,\n  endAdornmentClass: PropTypes.string,\n  endAdornmentIcon: PropTypes.object,\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n};\n\nFormInput.defaultProps = {\n  type: \"text\",\n  required: false,\n  autoFocus: false,\n  autoComplete: false,\n  variant: \"outlined\",\n  fullWidth: true,\n  label: \"\",\n  size: \"small\",\n  margin: \"dense\",\n  className: null,\n  placeholder: \"\",\n  startAdornmentClass: null,\n  endAdornmentClass: null,\n  disabled: false,\n  error: \"\",\n};\n\n\n\nconst FormButton = React.memo((props) => {\n  const styles = theme => ({\n    button: {\n      margin: theme.spacing(1, 0, 0, 0),\n      textTransform: \"none\",\n      fontSize: \"1.3em\",\n      color: \"white\",\n      backgroundColor: theme.palette.success.main,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.success.main, -25),\n      },\n    },\n    buttonSecondary: {\n      margin: theme.spacing(1, 0, 0, 0),\n      textTransform: \"none\",\n      fontSize: \"1em !important\",\n      color: \"white\",\n      backgroundColor: theme.palette.secondary.dark + \" !important\",\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.secondary.dark, -25)  + \" !important\",\n      },\n    },\n    buttonFederated: {\n      margin: theme.spacing(1, 0, 0, 0),\n      justifyContent: \"flex-start\",\n      paddingLeft: theme.spacing(5),\n      fontSize: \"1.3em\",\n    },  \n    buttonFederatedFacebook: {\n      backgroundColor: theme.palette.socialButtons.facebook.backgroundColor,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.socialButtons.facebook.backgroundColor, -25),\n      },\n    },\n    buttonFederatedGoogle: {\n      backgroundColor: theme.palette.socialButtons.google.backgroundColor,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.socialButtons.google.backgroundColor, -25),\n      },\n    },\n  \n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <Button\n      fullWidth={props.fullWidth}\n      variant={props.variant}\n      color={props.color}\n      size={props.size}\n      className={`${classes.button} ${props.social ? classes.buttonFederated : \"\"} ${props.social ? classes[\"buttonFederated\" + capitalize(props.social)] : \"\"} ${classes[props.className]}`}\n      startIcon={props.startIcon}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </Button>\n  );\n});\n\nFormButton.propTypes = {\n  social: PropTypes.oneOf([\n    \"Facebook\",\n    \"Google\",\n  ]),\n}\n\nFormButton.defaultProps = {\n  fullWidth: true,\n  variant: \"contained\",\n  color: \"primary\",\n  social: null,\n};\n\n\n\nconst FormCheckbox = React.memo((props) => {\n  const styles = theme => ({\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const classNameDisabled = props.disabled ? classes.disabled : \"\";\n\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={props.checked}\n          onChange={(e) => props.onChange(e.target.checked)}\n          className={`${props.className} ${classNameDisabled}`}\n          color={props.color}\n          size={props.size}\n          disabled={props.disabled}\n        />\n      }\n      label={\n        <FormText\n          className={`${props.className} ${classNameDisabled}`}\n        >\n          {props.children}\n        </FormText>\n      }\n    />\n  );\n});\n\nFormCheckbox.propTypes = {\n};\n\nFormCheckbox.defaultProps = {\n  checked: false,\n  color: \"primary\",\n  size: \"small\",\n};\n\n\n\nconst FormText = React.memo((props) => {\n  return (\n    <Typography\n      component={props.component}\n      variant={props.variant}\n      color={props.color}\n      align={props.align}\n      {...props}\n    >\n      {props.children}\n    </Typography>\n  );\n});\n\nFormText.propTypes = {\n};\n\nFormText.defaultProps = {\n  component: \"h1\",\n  variant: \"body2\",\n  color: \"textPrimary\",\n};\n\n\n\nconst FormLink = React.memo((props) => {\n  const styles = theme => ({\n    normal: {\n      cursor: \"pointer\",\n      textDecoration: props.decoration ? props.decoration : \"none\",\n    },\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n        color: \"grey\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const className = props.disabled ? classes.disabled : classes.normal;\n\n  return (\n    <Link\n      href={props.href}\n      className={`${props.className} ${className}`}\n      color={props.color}\n      {...props}\n    >\n      {props.children}\n    </Link>\n  );\n});\n\nFormLink.propTypes = {\n};\n\nFormLink.defaultProps = {\n  color: \"textPrimary\",\n};\n\n\n\nconst FormDividerWithText = React.memo((props) => {\n  const styles = theme => ({\n    container: {\n      display: \"flex\",\n      alignItems: \"center\",\n      marginTop: theme.spacing(props.marginVertical),\n      marginBottom: theme.spacing(props.marginVertical),\n    },\n    divider: {\n      width: \"100%\",\n      borderBottom: \"1px solid \" + (props.color ? props.color : theme.palette.primary.dark),\n      paddingLeft: theme.spacing(1),\n    },\n    text: {\n      paddingLeft: theme.spacing(props.paddingHorizontal),\n      paddingRight: theme.spacing(props.paddingHorizontal),\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.divider} />\n      {props.children && <span className={classes.text}>\n        {props.children}\n      </span>}\n      <div className={classes.divider} />\n    </div>\n  );\n});\n\nFormDividerWithText.propTypes = {\n  color: PropTypes.string,\n  marginVertical: PropTypes.oneOf([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]),\n  paddingHorizontal: PropTypes.oneOf([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]),\n};\n\nFormDividerWithText.defaultProps = {\n  marginVertical: 1,\n  paddingHorizontal: 1,\n};\n\n/*\nconst FormTooltip = ({ children, ...rest }: TooltipProps) => {\n  const [renderTooltip, setRenderTooltip] = useState(false);\n\n  return (\n    <div\n      onMouseEnter={() => !renderTooltip && setRenderTooltip(true)}\n      className=\"display-contents\"\n    >\n      {!renderTooltip && children}\n      {renderTooltip && (\n        <Tooltip {...rest}>\n          <span>\n            {children}\n          </span>\n        </Tooltip>\n      )}\n    </div>\n  );\n}\n\nconst _FormTooltip = React.memo((props) => {\n  const styles = theme => ({\n    normal: {\n      cursor: \"pointer\",\n      textDecoration: props.decoration ? props.decoration : \"none\",\n    },\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n        color: \"grey\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const className = props.disabled ? classes.disabled : classes.normal;\n\n  return (\n    <Tooltip\n      placement={props.placement}\n      enterDelay={props.enterDelay}\n      leaveDelay={props.leaveDelay}\n      {...props}\n    >\n      {props.children}\n    </Tooltip>\n  );\n});\n\nFormTooltip.propTypes = {\n  placement: PropTypes.string,\n  enterDelay: PropTypes.number,\n  leaveDelay: PropTypes.number,\n};\n\nFormTooltip.defaultProps = {\n  placement: \"left\",\n  enterDelay: 500,\n  leaveDelay: 200,\n};\n*/\n\nexport {FormInput, FormButton, FormCheckbox, FormText, FormLink, FormDividerWithText/*, FormTooltip*/};\n","import api from \"./API\";\n\nconst getProfile = () => {\n  return api.get(\"/user/getProfile\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateProfile = ({/*username, */email, password, firstName, lastName, address, fiscalCode, businessName}) => {\n  return api.post(\"/user/updateProfile\", {\n    //username,\n    email,\n    password,\n    firstName,\n    lastName,\n    address,\n    fiscalCode,\n    businessName,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateUserProperty = ({userId, propertyName, propertyValue}) => {\n  return api.post(\"/user/updateUserProperty\", {\n    userId,\n    propertyName,\n    propertyValue,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getPlans = plans => {\n  return api.get(\"/user/getPlans\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updatePlan = plan => {\n  console.log(\"updatePlan - plan:\", plan);\n  return api.post(\"/user/updatePlan\",\n    plan,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getRoles = roles => {\n  return api.get(\"/user/getRoles\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateRoles = roles => {\n  return api.post(\"/user/updateRoles\",\n    roles,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getPublicContent = () => {\n  return api.get(\"/test/all\");\n};\n\nconst getUserBoard = () => {\n  return api.get(\"/test/user\");\n};\n\nconst getModeratorBoard = () => {\n  return api.get(\"/test/mod\");\n};\n\nconst getAdminBoard = () => {\n  return api.get(\"/test/admin\");\n};\n\nconst getAdminPanel = () => {\n  return api.get(\"/admin/getAdminPanel\"\n  ).then(\n    (response) => {\n      return response.data;\n    },\n    (error) => {\n      return error;\n    }\n  );\n};\n\nconst UserService = {\n  getProfile,\n  updateProfile,\n  updateUserProperty,\n  getPlans,\n  updatePlan,\n  getRoles,\n  updateRoles,\n  getPublicContent,\n  getUserBoard,\n  getModeratorBoard,\n  getAdminBoard,\n  getAdminPanel,\n};\n\nexport default UserService;\n","export default __webpack_public_path__ + \"static/media/SelectedPlan-en.85b85fc0.png\";","export default __webpack_public_path__ + \"static/media/SelectedPlan-it.a09948bf.png\";","export default __webpack_public_path__ + \"static/media/SelectedPlan-fr.749a5b1e.png\";","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTranslation } from \"react-i18next\";\nimport { useModal } from \"mui-modal-provider\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Button from \"@mui/material/Button\";\nimport Link from \"@mui/material/Link\";\nimport Switch from \"@mui/material/Switch\";\nimport FlexibleDialog from \"./FlexibleDialog\";\nimport i18n from \"i18next\";\nimport { toast } from \"./Toast\";\nimport SelectedPlanImage_en from \"../assets/images/SelectedPlan-en.png\";\nimport SelectedPlanImage_it from \"../assets/images/SelectedPlan-it.png\";\nimport SelectedPlanImage_fr from \"../assets/images/SelectedPlan-fr.png\";\nimport JobService from \"../services/JobService\";\nimport { getCurrentLanguage } from \"../libs/I18n\";\nimport { capitalize, currencyISO4217ToSymbol, errorMessage } from \"../libs/Misc\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  section: {\n  },\n  cardHeader: {\n    paddingTop: theme.spacing(3),\n  },\n  cardHeaderActive: {\n    //fontWeight: \"bold\",\n  },\n  cardHeaderTest: {\n    paddingBottom: 0,\n  },\n  cardTest: { // a style similar to Stripe's test tag\n    color: \"#bb571f\",\n    backgroundColor: \"#ffde92\",\n    borderRadius: 5,\n    fontSize: 14,\n    fontWeight: \"bold\",\n    padding: 2,\n    paddingLeft: 7,\n    paddingRight: 7,\n  },\n  card: {\n    transition: \"box-shadow .3s\",\n    borderRadius: 10,\n    border: \"1px solid #ccc\",\n    \"&:hover\": {\n      boxShadow: \"10px 10px 30px rgba(32, 32, 132, .5)\",\n    },\n  },\n  cardActive: {\n    backgroundColor: \"#e0e8ff\",\n  },\n  cardActiveImage: {\n    position: \"absolute\",\n    marginLeft: 50,\n    marginTop: -20,\n    maxWidth: 80,\n    transform: \"rotate(15deg)\",\n    opacity: 0.6,\n    zIndex: 999,\n  },\n  cardHr: {\n    border: \"1px solid #eee\",\n  },\n}));\n\n\n\nconst Pricing = props => {\nconsole.log(\"Pricing - props:\", props);\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { showModal } = useModal();\n  const openDialog = (props) => showModal(FlexibleDialog, props);\n  const [perMonth, setPerMonth] = React.useState(false);\n  const [plan, setPlan] = useState(props.currentPlan);\n  const [plans, setPlans] = useState([]);\n\n  const handleChangePerMonth = (event) => {\n    setPerMonth(event.target.checked);\n  };\n\n  // get user plans on load\n  useEffect(() => {\n    JobService.getPlans().then(\n      result => {\n        setPlans(result.data);\n      },\n      error => {\n        toast.error(errorMessage(error));\n      }\n    );\n  }, [setPlans]);\n\n  const isActivePlan = (p) => {\nconsole.log(\"Pricing - isActivePlan - props.currentPlan: \", plan, \", p.name:\", p.name);\n    return plan.name === p.name;\n  };\n  \n  const [language] = useState(getCurrentLanguage(i18n));\n  let selectedPlanImage = null;\n  switch (language) {\n    case \"en\": selectedPlanImage = SelectedPlanImage_en; break;\n    case \"it\": selectedPlanImage = SelectedPlanImage_it; break;\n    case \"fr\": selectedPlanImage = SelectedPlanImage_fr; break;\n    default: selectedPlanImage = SelectedPlanImage_en; break;\n  }\n\n  return (\n    <section className={classes.section}>\n      <Container>\n        <Box py={0} textAlign=\"center\">\n          <Box mb={0}>\n            <Container maxWidth=\"lg\">\n              <Typography variant=\"h3\" component=\"h2\" gutterBottom={true}>\n                <Typography variant=\"h6\" component=\"span\" color=\"primary\">{t(\"Choose the plan which best suits your needs\")}</Typography>\n              </Typography>\n              {(\n                (typeof plans[0]?.pricePerMonth !== \"undefined\") &&\n                (typeof plans[0]?.pricePerYear !== \"undefined\")\n              ) && (\n                <div>\n                  <Typography variant=\"subtitle1\" component=\"span\">{t(\"per year\")}</Typography>\n                    <span>\n                      &nbsp;\n                      <Switch name=\"checkbox\" color=\"primary\" checked={perMonth} onChange={handleChangePerMonth} />\n                      &nbsp;\n                    </span>\n                  <Typography variant=\"subtitle1\" component=\"span\">{t(\"per month\")}</Typography>\n                </div>\n              )}\n            </Container>\n          </Box>\n          <Grid container spacing={3}>\n            {plans.map((p, index) => (\n              <Grid key={index} item xs={12} md={parseInt(plans.length ? 12 / plans.length : 12)}>\n                {isActivePlan(p) && (\n                  <img className={classes.cardActiveImage} src={selectedPlanImage} alt={t(\"Selected plan stamp\")} />\n                )}\n                <Card\n                  variant=\"outlined\"\n                  className={[classes.card, isActivePlan(p) ? classes.cardActive : null, /*props.paymentMode !== \"live\" ? classes.cardRibbonTest : null*/].join(\" \")}\n                >\n                  <CardHeader\n                    title={capitalize(t(p.name))}\n                    className={[classes.cardHeader, isActivePlan(p) ? classes.cardHeaderActive : null].join(\" \")}\n                    titleTypographyProps={isActivePlan(p) ? { /*fontWeight: \"bold\"*/ } : {}}\n                  >\n                  </CardHeader>\n                  {props.paymentMode !== \"live\" ? <span className={classes.cardTest}> TEST </span> : <></>}\n                  <hr className={classes.cardHr} />\n                  <CardContent>\n                    <Box px={1}>\n                      <Typography variant=\"h4\" component=\"h2\" gutterBottom={true} style={{fontWeight: \"bold\"}}>\n                        {currencyISO4217ToSymbol(p.priceCurrency)}\n                        {perMonth ? p.pricePerMonth : p.pricePerYear}\n                        {<Typography variant=\"h6\" color=\"textSecondary\" component=\"span\"> / {perMonth ? t(\"month\") : t(\"year\")}</Typography>}\n                      </Typography>\n                      <Typography color=\"textSecondary\" variant=\"subtitle1\" component=\"p\">{\n                        (p.cigsCountAllowedllowed === Number.MAX_SAFE_INTEGER) ?\n                          t(\"Unlimited CIG's\")\n                        :\n                          t(\"Up to {{cigs}} CIG's\", {cigs: p.cigsCountAllowedllowed})\n                      }</Typography>\n                      <Typography color=\"textSecondary\" variant=\"subtitle1\" component=\"div\">{\n                        p.supportTypes.map((supportType, index) => (\n                          <div key={index}>{t(\"Support\") + \" \" + t(\"by\") + \" \" + t(supportType)}</div>\n                        ))\n                      }</Typography>\n                      <br />\n                    </Box>\n                    <Button variant=\"contained\" color=\"secondary\"\n                      onClick={(e) => {\n                        openDialog({\n                          title: t(\"Sure to buy this plan?\"),\n                          contentText: t(\"It allows processing of up to {{cigs}} CIGs\", {cigs: p.cigsCountAllowedllowed}),\n                          actions: [\n                            {\n                              callback: () => {\n                                console.log(\"Clicked first action button\");\n                                props.onPlanSelected(e, p);\n                              },\n                              text: t(\"Ok\"),\n                              closeModal: true,\n                              // autoFocus: true,\n                            },\n                            {\n                              callback: () => {console.log(\"Clicked second action button\")},\n                              text: t(\"Cancel\"),\n                              closeModal: true,\n                            }\n                          ],\n                        });\n                      }}\n                      disabled={isActivePlan(p)}\n                    >{\n                      isActivePlan(p) ?\n                        t(\"Active plan\")\n                      :\n                        t(\"Select plan\")\n                    }\n                    </Button>\n                    {props.canForcePlan && (\n                      <>\n                        <Box mt={1} />\n                        <Button variant=\"contained\" color=\"tertiary\"\n                          onClick={(e) => {\n                            //props.currentPlan = plan;\n                            setPlan(p)\n                            props.onPlanForced(e, p.name);\n                          }}\n                          disabled={isActivePlan(p)}\n                        >{\n                          t(\"Force plan\")\n                        }\n                        </Button>\n                      </>\n                    )}\n                    <Box mt={2}>\n                      <Link href=\"#\" color=\"primary\">{/* TODO: create a link (or popup) to give more details about selecting this plan... */}\n                        <small>{t(\"Learn more\")}</small>\n                      </Link>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      </Container>\n    </section>\n  );\n}\n\nPricing.propTypes = {\n  currentPlan: PropTypes.object,\n  onPlanSelected: PropTypes.func,\n  canForcePlan: PropTypes.bool,\n  onPlanForced: PropTypes.func,\n};\n\nPricing.defaultProps = {\n  currentPlan: {},\n  onPlanSelected: (e) => console.log(\"Selected plan:\", e),\n  canForcePlan: false,\n  onPlanForced: (e) => console.log(\"Forced plan:\", e),\n};\n\nexport default React.memo(Pricing);\n","import api from \"./API\";\n\nconst mode = async() => {\n  return await api.get(\"/payment/mode\",\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst createCheckoutSession = async({product}) => {\n  return await api.post(\"/payment/create-checkout-session\", {\n    product\n  }).then(\n    response => {\nconsole.log(\"CCS - res:\", response);\n      return response.data;\n    },\n    error => {\nconsole.log(\"CCS - err:\", error);\n      return error;\n    }\n  );\n};\n\nconst PaymentService = {\n  mode,\n  createCheckoutSession\n};\n\nexport default PaymentService;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory/*, useLocation*/} from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useBeforeunload } from \"react-beforeunload\";\nimport makeStyles from '@mui/styles/makeStyles';\nimport AppBar from \"@mui/material/AppBar\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Typography from \"@mui/material/Typography\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Grid from \"@mui/material/Grid\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\n//import Tooltip from \"@mui/material/Tooltip\";\nimport IconAvatar from \"@mui/icons-material/AccountBoxOutlined\";\nimport IconPerson from \"@mui/icons-material/Person\";\nimport IconEmail from \"@mui/icons-material/Email\";\nimport IconFiscalCode from \"@mui/icons-material/AssignmentInd\";\nimport IconBusinessName from \"@mui/icons-material/Business\";\nimport IconAddressStreet from \"@mui/icons-material/House\";\nimport IconAddressStreetNo from \"@mui/icons-material/LooksOne\";\nimport IconAddressCity from \"@mui/icons-material/LocationCity\";\nimport IconAddressProvince from \"@mui/icons-material/Room\";\nimport IconAddressZip from \"@mui/icons-material/Code\";\nimport IconAddressCountry from \"@mui/icons-material/Language\";\nimport Pricing from \"../../components/Pricing\";\nimport { errorMessage/*, capitalize*/ } from \"../../libs/Misc\";\nimport UserService from \"../../services/UserService\";\nimport TokenService from \"../../services/TokenService\";\nimport JobService from \"../../services/JobService\";\nimport PaymentService from \"../../services/PaymentService\";\nimport EventBus from \"../../libs/EventBus\";\nimport { toast } from \"../Toast\";\nimport { FormInput, FormButton } from \"../FormElements\";\nimport config from \"../../config\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    //backgroundColor: theme.palette.background.paper,\n  },\n  avatar: {\n    backgroundColor: theme.palette.success.main,\n  },\n  columnLeft: {\n    marginLeft: theme.spacing(0.2),\n  },\n  columnRight: {\n    marginLeft: \"auto\",\n    marginRight: theme.spacing(0.2),\n  },\n  form: {\n  },\n  fieldset: {\n    border: 0,\n  },\n  fieldsetPersonalData: {\n    color: \"#758c75\",\n    fontSize: 13,\n    border: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#758c75\",\n    borderRadius: 5,\n  },\n  fieldsetCompanyData: {\n    color: \"#7a7aa5\",\n    fontSize: 13,\n    border: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#7a7aa5\",\n    borderRadius: 5,\n  },\n  fieldsetAddress: {\n    color: \"#aaa\",\n    fontSize: 13,\n    border: 1,\n    borderStyle: \"solid\",\n    borderColor: \"#aaa\",\n    borderRadius: 5,\n  },\n  // title: {\n  //   width: \"100%\",\n  //   color: theme.palette.title.color,\n  //   //backgroundColor: '#ccc', //theme.palette.title.backgroundColor,\n  //   //borderRadius: 3,\n  //   display: \"flex\",\n  //   justifyContent: \"center\",\n  //   paddingTop: 3,\n  //   paddingBottom: 50,\n  //   paddingLeft: 10,\n  //   paddingRight: 10,\n  // },\n  formControlSelectPlan: {\n    minWidth: 200,\n  },\n  formControlSelectRole: {\n    minWidth: 200,\n  },\n  tab: {\n    backgroundColor: theme.palette.secondary.light,\n  },\n  tabIndicator: {\n    backgroundColor: theme.palette.secondary.dark,\n    height: 1,\n  },\n});\n\nconst useStyles = makeStyles((theme) => (styles(theme)));\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst PROFILE_PERSONAL = 0;\nconst PROFILE_PLAN = 1;\nconst PROFILE_ROLES = 2;\n\n\n\nfunction ProfileTabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`nav-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>\n        {children}\n      </Box>\n    </Typography>\n  );\n}\n\nProfileTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction Profile(props) {\n//console.log(\"PROFILE - props:\", props);\n  const classes = useStyles();\n  const history = useHistory();\n  //const location = useLocation();\n//console.log(\"PROFILE - location.state:\", location.state);\n  const [user, setUser] = useState(TokenService.getUser());\n  const [profile, setProfile] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [fiscalCode, setFiscalCode] = useState(\"\");\n  const [businessName, setBusinessName] = useState(\"\");\n  const [address, setAddress] = useState({});\n  const [addressStreet, setAddressStreet] = useState(\"\");\n  const [addressStreetNo, setAddressStreetNo] = useState(\"\");\n  const [addressCity, setAddressCity] = useState(\"\");\n  const [addressProvince, setAddressProvince] = useState(\"\");\n  const [addressZip, setAddressZip] = useState(\"\");\n  const [addressCountry, setAddressCountry] = useState(\"\");\n  const [paymentMode, setPaymentMode] = useState(\"\");\n  const [plan, setPlan] = useState({});\n  const [plans, setPlans] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const [rolesNames, setRolesNames] = useState([]);\n  const [error, setError] = useState({});\n  const { t } = useTranslation();\n  const [tabValue, setTabValue] = React.useState(props?.location?.state?.tabValue ? props?.location?.state?.tabValue : 0);\n  const [anyProfileChanges, setAnyProfileChanges] = React.useState(false);\n  const [anyRolesChanges, setAnyRolesChanges] = React.useState(false);\n  const [anyPlanChanges, setAnyPlanChanges] = React.useState(false);\n\n  const handleChangeTabValue = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  \n  // avoid page unload when unsaved changes present\n  useBeforeunload((event) => {\n    if (anyProfileChanges || anyRolesChanges || anyPlanChanges) {\n      event.preventDefault();\n    }\n  });\n  \n  // avoid history route change when unsaved changes present\n  useEffect(() => {\nconsole.log(\"useeffect block\");\n    const unblock = history.block((location, action) => {\n      if (anyProfileChanges || anyRolesChanges || anyPlanChanges) {\n        return window.confirm(t(\"Are you sure to ignore unsaved data?\"));\n      }\n      return true;\n    });\n  \n    return () => {\n      unblock();\n    };\n  }, [anyProfileChanges, anyRolesChanges, anyPlanChanges, history, t]);\n  \n  useEffect(() => {\nconsole.log(\"useeffect profile:\", profile);\n    if (profile) {\n      setEmail(profile.email ?? \"\");\n      setFirstName(profile.firstName ?? \"\");\n      setLastName(profile.lastName ?? \"\");\n      setFiscalCode(profile.fiscalCode ?? \"\");\n      setBusinessName(profile.businessName ?? \"\");\n      setAddressStreet(profile.address?.street ?? \"\");\n      setAddressStreetNo(profile.address?.streetNo ?? \"\");\n      setAddressCity(profile.address?.city ?? \"\");\n      setAddressProvince(profile.address?.province ?? \"\");\n      setAddressZip(profile.address?.zip ?? \"\");\n      setAddressCountry(profile.address?.country ?? \"\");\n      setPlan(profile.plan ?? {name: \"free\"});\n      setRoles(profile.roles ? profile.roles.map(role => role.name) : []);\n      setAnyProfileChanges(false);\n      setAnyRolesChanges(false);\n      setAnyPlanChanges(false);\n    }\n  }, [profile]);\n\n  useEffect(() => {\nconsole.log(\"useeffect user.id\");\n    if (!user?.id) {\n      toast.error(t(\"User must be authenticated\"));\n      history.goBack();\n    }\n  }, [user?.id, history, t]);\n\n  // get user profile on load\n  useEffect(() => {\nconsole.log(\"useeffect getProfile\");\n    UserService.getProfile().then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"getProfile error:\", result);\n          return setError({ code: result.message });\n        }\n        //console.log(`profile got successfully:`, result);\n        setProfile(result.user); // we have to update local state outside this useEffect, otherwise there is a really long delay in each set function...\n      }\n    );\n    JobService.getPlans().then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"getPlans error:\", result);\n          return setError({ code: result.message });\n        }\n    console.log(`plans got successfully:`, result);\n        setPlans(result.data);\n      }\n    );\n    UserService.getRoles().then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"getRoles error:\", result);\n          return setError({ code: result.message });\n        }\nconsole.log(`roles got successfully:`, result);\n        setRolesNames(result.map(role => role.name));\n      }\n    );\n    PaymentService.mode().then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"mode error:\", result);\n          return setError({ code: result.message });\n        }\n        console.log(\"mode:\", result);\n        setPaymentMode(result.mode);\n      }\n    );\n  }, [user?.id]);\n  \n  useEffect(() => {\n    setAddress({\n      street: addressStreet,\n      streetNo: addressStreetNo,\n      city: addressCity,\n      province: addressProvince,\n      zip: addressZip,\n      country: addressCountry,\n    });\n  }, [addressStreet, addressStreetNo, addressCity, addressProvince, addressZip, addressCountry]);\n\n  const createCheckoutSession = (product) => {\n    PaymentService.createCheckoutSession({product: product.name}).then(\n      result => {\n        //console.log(`createCheckoutSession got successfully:`, result);\n        if (!result?.session?.url) {\n          return toast.error(t(\"Sorry, could not get the payment page\"));\n        }\n        window.location = result.session.url; // redirect to payment session success_url\n      },\n      error => {\n        console.error(\"createCheckoutSession error:\", error);\n        toast.error(errorMessage(error));\n      },\n    );\n  };\n\n  const formProfileUpdate = (e) => {\n    e.preventDefault();\n    setError({});\n\n    UserService.updateProfile({\n      email,\n      firstName,\n      lastName,\n      fiscalCode,\n      businessName,\n      address,\n      roles,\n    }).then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"profileUpdate error:\", result);\n          toast.warn(errorMessage(result));\n          return setError({ code: result.message });\n        }\n        setAnyProfileChanges(false);\n        toast.success(t(\"Profile updated successfully\"));\n      }\n    );\n  };\n\n  const formRolesUpdate = (e) => {\n    // refresh user roles in local state and in token service (local storage) too\n    user.roles = ((String)(roles)).split(\",\");\nconsole.log(\"USER.ROLES:\", user.roles, typeof user.roles);\n    if (!user.roles || !user.roles.length || user.roles.every(role => role === \"\")) {\n      user.roles = config.api.rolesNamesDefault; // if empty roles, use rolesNamesDefault\n      setRoles(user.roles);\nconsole.log(\"USER.ROLES DEFAULTS TO:\", user.roles, typeof user.roles);\n    }\nconsole.log(\"*** USER:\", user);\n    setUser(user);\n    TokenService.setUser(user);\n    UserService.updateRoles({\n      roles: user.roles,\n    }).then(\n      result => {\n        if (result instanceof Error) {\n          console.error(\"profileUpdate error:\", result);\n          toast.error(errorMessage(result));\n          return setError({ code: result.message });\n        }\n        setRoles(user.roles);\n        setAnyRolesChanges(false);\n        EventBus.dispatch(\"roles-change\");\n        toast.success(t(\"Roles updated successfully\"));\n      }\n    );\n  };\n\n  const formPlanSelect = (e, plan) => {\n    // TODO: what to do with free plan selected?\n    // TODO: what to do with plan downgrade?\n    createCheckoutSession(plan);\n  }\n\n  const formPlanForce = (e, planName) => {\n//console.log(\"formPlanForce:\", e);\n    if (userCanForcePlan()) {\n      const p = plans.find(plan => plan.name === planName);\n      //setPlan(p);\n      user.plan = p;\n      setUser(user);\n      TokenService.setUser(user);\n      UserService.updatePlan({\n        plan: p.name,\n      }).then(\n        result => {\n          if (result instanceof Error) {\n            console.error(\"profileUpdate error:\", result);\n            toast.error(errorMessage(result));\n            return setError({ code: result.message });\n          }\n          setPlan(plan);\n          setAnyPlanChanges(false);\n          EventBus.dispatch(\"plan-change\");\n          toast.success(t(\"Plan forced successfully\"));\n        },\n        // error => {\n        //   console.error(\"profileUpdate error:\", result);\n        //   toast.error(errorMessage(result));\n        //   return setError({ code: result.message });\n        // }\n      );\n    }\n  };\n\n  const userCanUpdateRoles = ()  => {\n    return user?.roles?.includes(\"admin\");\n  };\n\n  const userCanForcePlan = ()  => {\n    return user?.roles?.includes(\"admin\");\n  };\n  \n  return (\n    <div className={classes.root}>\n\n      <Container maxWidth={\"sm\"}>\n        <Box m={1} />\n\n        <Grid container justifyContent=\"center\">\n          <Avatar className={classes.avatar}>\n            <IconAvatar />\n          </Avatar>\n        </Grid>\n\n        <Box m={3} />\n\n        <AppBar position=\"static\">\n          <Tabs\n            value={tabValue}\n            onChange={handleChangeTabValue}\n            variant=\"standard\"\n            aria-label=\"tabs for user's personal profile\"\n            classes={{\n              indicator: classes.tabIndicator\n            }}\n            className={classes.tab}\n          >\n            <Tab label={t(\"Your profile\")} {...a11yProps(0)} />\n            <Tab label={t(\"Your plan\")} {...a11yProps(1)} />\n            <Tab label={t(\"Your role(s)\")} {...a11yProps(2)} />\n          </Tabs>\n        </AppBar>\n      </Container>\n\n      <Container maxWidth={(tabValue === PROFILE_PLAN) ? \"md\" : \"sm\"}>\n        {(tabValue === PROFILE_PERSONAL) &&\n        <ProfileTabPanel value={tabValue} index={PROFILE_PERSONAL}>\n      \n          <form name=\"form\" className={classes.form} noValidate autoComplete=\"off\">\n            <fieldset className={classes.fieldset}>\n\n              <Box m={3} />\n\n              <fieldset className={classes.fieldsetPersonalData}>\n                <legend>{t(\"Personal data\")}</legend>\n\n                {/* <Tooltip\n                  title={t(\"Email\")}\n                  placement={\"left\"}\n                > */}\n                  <Grid item xs={12}>\n                    <FormInput\n                      id={\"email\"}\n                      value={email}\n                      onChange={v => { setAnyProfileChanges(true); setEmail(v); }}\n                      placeholder={t(\"Email\")}\n                      startAdornmentIcon={<IconEmail />}\n                      error={error.email}\n                      autoFocus\n                    />\n                  </Grid>\n                {/* </Tooltip> */}\n\n                <Grid container direction={\"row\"} columnSpacing={{xs: 1, sm: 2, md: 3, lg: 4}} rowSpacing={0}>\n                  {/* <Tooltip\n                    title={t(\"First name\")}\n                    placement={\"left\"}\n                  > */}\n                    <Grid item xs={12} sm={6}>\n                      <FormInput\n                        id={\"firstName\"}\n                        value={firstName}\n                        onChange={v => { setAnyProfileChanges(true); setFirstName(v); }}\n                        placeholder={t(\"First Name\")}\n                        startAdornmentIcon={<IconPerson />}\n                        error={error.firstName}\n                      />\n                    </Grid>\n                  {/* </Tooltip> */}\n\n                  {/* <Tooltip\n                      title={t(\"Last name\")}\n                      placement={\"left\"}\n                    > */}\n                    <Grid item xs={12} sm={6}>\n                      <FormInput\n                        id={\"lastName\"}\n                        value={lastName}\n                        onChange={v => { setAnyProfileChanges(true); setLastName(v); }}\n                        placeholder={t(\"Last Name\")}\n                        startAdornmentIcon={<IconPerson />}\n                        error={error.lastName}\n                      />\n                    </Grid>\n                  {/* </Tooltip> */}\n                </Grid>\n              </fieldset>\n\n              <Box m={1} />\n\n              <fieldset className={classes.fieldsetCompanyData}>\n                <legend>{t(\"Company data\")}</legend>\n\n                <Grid container direction={\"row\"} columnSpacing={{xs: 1, sm: 2, md: 3, lg: 4}} rowSpacing={0}>\n                  {/* <Tooltip\n                    title={t(\"Company fiscal code\")}\n                    placement={\"left\"}\n                  > */}\n                    <Grid item xs={12}>\n                      <FormInput\n                        id={\"fiscalCode\"}\n                        value={fiscalCode}\n                        onChange={v => { setAnyProfileChanges(true); setFiscalCode(v); }}\n                        placeholder={t(\"Company fiscal code\")}\n                        startAdornmentIcon={<IconFiscalCode />}\n                        error={error.fiscalCode}\n                      />\n                    </Grid>\n                  {/* </Tooltip> */}\n\n                  {/* <Tooltip\n                    title={t(\"Company business name\")}\n                    placement={\"left\"}\n                  > */}\n                    <Grid item xs={12}>\n                      <FormInput\n                        id={\"businessName\"}\n                        value={businessName}\n                        onChange={v => { setAnyProfileChanges(true); setBusinessName(v); }}\n                        placeholder={t(\"Company business name\")}\n                        startAdornmentIcon={<IconBusinessName />}\n                        error={error.businessName}\n                      />\n                    </Grid>\n                  {/* </Tooltip> */}\n                </Grid>\n                  \n                <Box m={1} />\n\n                <fieldset className={classes.fieldsetAddress}>\n                  <legend>{t(\"Address\")}</legend>\n\n                  <Grid container direction={\"row\"} columnSpacing={{xs: 1, sm: 2, md: 3, lg: 4}} rowSpacing={0}>\n                    {/* <Tooltip\n                      title={t(\"Address street\")}\n                      placement={\"left\"}\n                    > */}\n                      <Grid item xs={12} sm={8}>\n                        <FormInput\n                          id={\"addressStreet\"}\n                          value={addressStreet}\n                          onChange={v => { setAnyProfileChanges(true); setAddressStreet(v); }}\n                          placeholder={t(\"Street\")}\n                          startAdornmentIcon={<IconAddressStreet />}\n                          error={error.addressStreet}\n                        />\n                      </Grid>\n                    {/* </Tooltip> */}\n\n                    {/* <Tooltip\n                      title={t(\"Address street number\")}\n                      placement={\"left\"}\n                    > */}\n                      <Grid item xs={12} sm={4}>\n                        <FormInput\n                          id={\"addressStreetNo\"}\n                          value={addressStreetNo}\n                          onChange={v => { setAnyProfileChanges(true); setAddressStreetNo(v); }}\n                          placeholder={t(\"N°\")}\n                          startAdornmentIcon={<IconAddressStreetNo />}\n                          error={error.addressStreetNo}\n                        />\n                      </Grid>\n                    {/* </Tooltip> */}\n\n                    {/* <Tooltip\n                      title={t(\"Address city\")}\n                      placement={\"left\"}\n                    > */}\n                      <Grid item xs={12}>\n                        <FormInput\n                          id={\"addressCity\"}\n                          value={addressCity}\n                          onChange={v => { setAnyProfileChanges(true); setAddressCity(v); }}\n                          placeholder={t(\"City\")}\n                          startAdornmentIcon={<IconAddressCity />}\n                          error={error.addressCity}\n                        />\n                      </Grid>\n                    {/* </Tooltip> */}\n        \n                    {/* <Tooltip\n                      title={t(\"Address province\")}\n                      placement={\"left\"}\n                    > */}\n                      <Grid item xs={12} sm={7}>\n                        <FormInput\n                          id={\"addressProvince\"}\n                          value={addressProvince}\n                          onChange={v => { setAnyProfileChanges(true); setAddressProvince(v); }}\n                          placeholder={t(\"Province\")}\n                          startAdornmentIcon={<IconAddressProvince />}\n                          error={error.addressProvince}\n                        />\n                      </Grid>\n                    {/* </Tooltip> */}\n        \n                    {/* <Tooltip\n                      title={t(\"Address ZIP code\")}\n                      placement={\"left\"}\n                    > */}\n                      <Grid item xs={12} sm={5}>\n                        <FormInput\n                          id={\"addressZip\"}\n                          value={addressZip}\n                          onChange={v => { setAnyProfileChanges(true); setAddressZip(v); }}\n                          placeholder={t(\"ZIP\")}\n                          startAdornmentIcon={<IconAddressZip />}\n                          error={error.addressZip}\n                        />\n                      </Grid>\n                    {/* </Tooltip> */}\n\n                    {/* <Tooltip\n                      title={t(\"Address country\")}\n                      placement={\"left\"}\n                    > */}\n                      <Grid item xs={12}>\n                        <FormInput\n                          id={\"addressCountry\"}\n                          value={addressCountry}\n                          onChange={v => { setAnyProfileChanges(true); setAddressCountry(v); }}\n                          placeholder={t(\"Country\")}\n                          startAdornmentIcon={<IconAddressCountry />}\n                          error={error.addressCountry}\n                        />\n                      </Grid>\n                    {/* </Tooltip> */}\n                  </Grid>\n\n                </fieldset>\n              </fieldset>\n            </fieldset>\n          </form>\n        </ProfileTabPanel>\n        }\n\n        {(tabValue === PROFILE_PLAN) &&\n        <ProfileTabPanel value={tabValue} index={PROFILE_PLAN}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <fieldset className={classes.fieldset}>\n              <Pricing\n                currentPlan={plan}\n                onPlanSelected={formPlanSelect}\n                canForcePlan={userCanForcePlan()}\n                onPlanForced={formPlanForce}\n                paymentMode={paymentMode}\n              />\n            </fieldset>\n          </form>\n        </ProfileTabPanel>\n        }\n\n        {(tabValue === PROFILE_ROLES) &&\n        <ProfileTabPanel value={tabValue} index={PROFILE_ROLES}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <fieldset className={classes.fieldset}>\n\n              <Box m={3} />\n\n                {/* <Tooltip\n                  title={\n                    userCanUpdateRoles() ?\n                      t(\"Role(s)\") + \" (\" + t(\"select one or more role\") + \")\"\n                    :\n                      t(\"Your role(s)\")\n                  }\n                  placement={\"left\"}\n                > */}\n                  <Grid item xs={12}>\n                    <FormControl variant=\"outlined\" className={classes.formControlSelectRole}>\n                      <InputLabel id=\"roles-label\">{t(\"Role(s)\")}</InputLabel>\n                      <Select\n                        labelId=\"roles-label\"\n                        id=\"roles\"\n                        multiple\n                        value={roles}\n                        onChange={e => { setAnyRolesChanges(true); setRoles(e.target.value); }}\n                        label={t(\"Role(s)\")}\n                        disabled={!userCanUpdateRoles()}\n                      >\n                        {rolesNames.map((role, index) => (\n                          <MenuItem key={index} value={role}>{role}</MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                {/* </Tooltip> */}\n            </fieldset>\n          </form>\n        </ProfileTabPanel>\n        }\n      </Container>\n\n      {(tabValue === PROFILE_PERSONAL) && (\n        <Grid container justifyContent=\"center\">\n          <FormButton\n            fullWidth={false}\n            className={\"buttonSecondary\"}\n            autoFocus={true}\n            onClick={formProfileUpdate}\n          >\n            {t(\"Update\")}\n          </FormButton>\n        </Grid>\n      )}\n\n      {(tabValue === PROFILE_ROLES) && userCanUpdateRoles() && (\n        <Grid container justifyContent=\"center\">\n          <FormButton\n            fullWidth={false}\n            className={\"buttonSecondary\"}\n            autoFocus={true}\n            onClick={formRolesUpdate}\n            //disabled={!userCanUpdateRoles()}\n          >\n            {t(\"Update\")}\n          </FormButton>\n        </Grid>\n      )}\n      <Box m={1} />\n\n    </div>\n  );\n}\n\nProfile.propTypes = {\n  tabValue: PropTypes.number,\n};\n\nProfile.defaultProps = {\n  tabValue: PROFILE_PERSONAL,\n};\n\n\n\nexport default React.memo(Profile);\n"],"sourceRoot":""}