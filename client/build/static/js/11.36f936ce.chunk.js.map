{"version":3,"sources":["libs/Styling.js","components/FormElements.js","components/Dialog.js","../node_modules/@material-ui/icons/LockOpenOutlined.js","../node_modules/@material-ui/icons/LockOpen.js","components/auth/ForgotPassword.js"],"names":["shadeColor","color","amount","replace","Math","min","max","parseInt","toString","substr","FormInput","React","memo","props","classes","makeStyles","theme","startAdornment","backgroundColor","height","maxHeight","marginLeft","marginRight","paddingLeft","paddingRight","borderRight","endAdornment","borderLeft","useStyles","TextField","id","type","value","required","autoFocus","autoComplete","variant","fullWidth","label","size","margin","className","textField","placeholder","onChange","e","target","disabled","error","isEmptyObject","InputProps","startAdornmentIcon","InputAdornment","startAdornmentClass","position","endAdornmentIcon","endAdornmentClass","input","defaultProps","FormButton","button","spacing","textTransform","fontSize","palette","success","main","buttonSecondary","secondary","dark","buttonFederated","justifyContent","buttonFederatedFacebook","socialButtons","facebook","buttonFederatedGoogle","google","styles","Button","social","capitalize","startIcon","onClick","children","cursor","textDecoration","classNameDisabled","FormControlLabel","control","Checkbox","checked","FormText","Typography","component","align","FormLink","normal","decoration","Link","href","FormDividerWithText","container","display","alignItems","marginTop","marginVertical","marginBottom","divider","width","borderBottom","primary","text","paddingHorizontal","Dialog","open","dialogOpen","onClose","dialogSetOpen","dialogTitle","style","whiteSpace","dialogContent","dialogButtons","map","index","callback","close","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_default","createElement","d","avatar","fieldset","border","ForgotPassword","useState","email","setEmail","password","setPassword","passwordConfirmed","setPasswordConfirmed","code","setError","waitingForCode","setWaitingForCode","codeDeliveryMedium","setCodeDeliveryMedium","setCode","setDialogTitle","setDialogContent","setDialogButtons","setDialogOpen","history","useHistory","t","useTranslation","openDialog","title","content","buttons","validateForm","validateEmail","err","toast","warning","validatePassword","maxWidth","form","noValidate","m","preventDefault","AuthService","forgotPassword","then","result","Error","errorMessage","medium","confirmationCode","resetPasswordConfirm","console","log","response","data","keys","values","push","resendResetPasswordCode","info"],"mappings":"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","file":"static/js/11.36f936ce.chunk.js","sourcesContent":["/**\n * Shade a color by an amount [-100 - 100] (negative is darker, positive is ligher).\n */\nexport const shadeColor = (color, amount) => {\n  return \"#\" + color.replace(/^#/, \"\").replace(/../g, color => (\"0\" + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { shadeColor } from \"../libs/Styling\";\nimport { capitalize, isEmptyObject } from \"../libs/Misc\";\n\n\n\nconst FormInput = React.memo((props) => {\n  const styles = theme => ({\n    startAdornment: {\n      backgroundColor: \"#eaedf0\",\n      height: \"2.5rem\",\n      maxHeight: \"3rem\",\n      marginLeft: -15,\n      marginRight: 5,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderRight: \"1px solid #c5c5c5\",\n    },\n    endAdornment: {\n      backgroundColor: \"#eaedf0\",\n      height: \"2.5rem\",\n      maxHeight: \"3rem\",\n      marginLeft: 5,\n      marginRight: -15,\n      paddingLeft: 10,\n      paddingRight: 10,\n      borderLeft: \"1px solid #c5c5c5\",\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <TextField\n      id={props.id}\n      type={props.type}\n      value={props.value}\n      required={props.required}\n      autoFocus={props.autoFocus}\n      autoComplete={props.autoComplete.toString()}\n      variant={props.variant}\n      fullWidth={props.fullWidth}\n      label={props.label}\n      size={props.size}\n      margin={props.margin}\n      className={props.className ? props.className : classes.textField}\n      placeholder={props.placeholder}\n      onChange={e => props.onChange(e.target.value)}\n      disabled={props.disabled}\n      error={!isEmptyObject(props.error)}\n      InputProps={{\n        startAdornment: props.startAdornmentIcon ? (\n          <InputAdornment\n            className={props.startAdornmentClass ? props.startAdornmentClass : classes.startAdornment}\n            position=\"start\"\n          >\n            {props.startAdornmentIcon}\n          </InputAdornment>\n        ) : (<></>),\n        endAdornment: props.endAdornmentIcon ? (\n          <InputAdornment\n            className={props.endAdornmentClass ? props.endAdornmentClass : classes.endAdornment}\n            position=\"end\"\n          >\n            {props.endAdornmentIcon}\n          </InputAdornment>\n        ) : (<></>),\n        className: classes.input,\n      }}\n    />\n  );\n});\n\nFormInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  startAdornmentClass: PropTypes.string,\n  startAdornmentIcon: PropTypes.object,\n  endAdornmentClass: PropTypes.string,\n  endAdornmentIcon: PropTypes.object,\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n};\n\nFormInput.defaultProps = {\n  type: \"text\",\n  required: false,\n  autoFocus: false,\n  autoComplete: false,\n  variant: \"outlined\",\n  fullWidth: true,\n  label: \"\",\n  size: \"small\",\n  margin: \"dense\",\n  className: null,\n  placeholder: \"\",\n  startAdornmentClass: null,\n  endAdornmentClass: null,\n  disabled: false,\n  error: \"\",\n};\n\n\n\nconst FormButton = React.memo((props) => {\n  const styles = theme => ({\n    button: {\n      margin: theme.spacing(1, 0, 0, 0),\n      textTransform: \"none\",\n      fontSize: \"1.3em\",\n      color: \"white\",\n      backgroundColor: theme.palette.success.main,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.success.main, -25),\n      },\n    },\n    buttonSecondary: {\n      margin: theme.spacing(1, 0, 0, 0),\n      textTransform: \"none\",\n      fontSize: \"1em !important\",\n      color: \"white\",\n      backgroundColor: theme.palette.secondary.dark + \" !important\",\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.secondary.dark, -25)  + \" !important\",\n      },\n    },\n    buttonFederated: {\n      margin: theme.spacing(1, 0, 0, 0),\n      justifyContent: \"flex-start\",\n      paddingLeft: theme.spacing(5),\n      fontSize: \"1.3em\",\n    },  \n    buttonFederatedFacebook: {\n      backgroundColor: theme.palette.socialButtons.facebook.backgroundColor,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.socialButtons.facebook.backgroundColor, -25),\n      },\n    },\n    buttonFederatedGoogle: {\n      backgroundColor: theme.palette.socialButtons.google.backgroundColor,\n      \"&:hover\": {\n        backgroundColor: shadeColor(theme.palette.socialButtons.google.backgroundColor, -25),\n      },\n    },\n  \n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <Button\n      fullWidth={props.fullWidth}\n      variant={props.variant}\n      color={props.color}\n      size={props.size}\n      className={`${classes.button} ${props.social ? classes.buttonFederated : \"\"} ${props.social ? classes[\"buttonFederated\" + capitalize(props.social)] : \"\"} ${classes[props.className]}`}\n      startIcon={props.startIcon}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </Button>\n  );\n});\n\nFormButton.propTypes = {\n  social: PropTypes.oneOf([\n    \"Facebook\",\n    \"Google\",\n  ]),\n}\n\nFormButton.defaultProps = {\n  fullWidth: true,\n  variant: \"contained\",\n  color: \"primary\",\n  social: null,\n};\n\n\n\nconst FormCheckbox = React.memo((props) => {\n  const styles = theme => ({\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const classNameDisabled = props.disabled ? classes.disabled : \"\";\n\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={props.checked}\n          onChange={(e) => props.onChange(e.target.checked)}\n          className={`${props.className} ${classNameDisabled}`}\n          color={props.color}\n          size={props.size}\n          disabled={props.disabled}\n        />\n      }\n      label={\n        <FormText\n          className={`${props.className} ${classNameDisabled}`}\n        >\n          {props.children}\n        </FormText>\n      }\n    />\n  );\n});\n\nFormCheckbox.propTypes = {\n};\n\nFormCheckbox.defaultProps = {\n  checked: false,\n  color: \"primary\",\n  size: \"small\",\n};\n\n\n\nconst FormText = React.memo((props) => {\n  return (\n    <Typography\n      component={props.component}\n      variant={props.variant}\n      color={props.color}\n      align={props.align}\n      {...props}\n    >\n      {props.children}\n    </Typography>\n  );\n});\n\nFormText.propTypes = {\n};\n\nFormText.defaultProps = {\n  component: \"h1\",\n  variant: \"body2\",\n  color: \"textPrimary\",\n};\n\n\n\nconst FormLink = React.memo((props) => {\n  const styles = theme => ({\n    normal: {\n      cursor: \"pointer\",\n      textDecoration: props.decoration ? props.decoration : \"none\",\n    },\n    disabled: {\n      color: \"grey\",\n      cursor: \"default\",\n      \"&:hover\": {\n        textDecoration: \"none\",\n        color: \"grey\",\n      },\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  const className = props.disabled ? classes.disabled : classes.normal;\n\n  return (\n    <Link\n      href={props.href}\n      className={`${props.className} ${className}`}\n      color={props.color}\n      {...props}\n    >\n      {props.children}\n    </Link>\n  );\n});\n\nFormLink.propTypes = {\n};\n\nFormLink.defaultProps = {\n  color: \"textPrimary\",\n};\n\n\n\nconst FormDividerWithText = React.memo((props) => {\n  const styles = theme => ({\n    container: {\n      display: \"flex\",\n      alignItems: \"center\",\n      marginTop: theme.spacing(props.marginVertical),\n      marginBottom: theme.spacing(props.marginVertical),\n    },\n    divider: {\n      width: \"100%\",\n      borderBottom: \"1px solid \" + (props.color ? props.color : theme.palette.primary.dark),\n      paddingLeft: theme.spacing(1),\n    },\n    text: {\n      paddingLeft: theme.spacing(props.paddingHorizontal),\n      paddingRight: theme.spacing(props.paddingHorizontal),\n    },\n  });\n  const useStyles = makeStyles((theme) => (styles(theme)));\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.divider} />\n      {props.children && <span className={classes.text}>\n        {props.children}\n      </span>}\n      <div className={classes.divider} />\n    </div>\n  );\n});\n\nFormDividerWithText.propTypes = {\n  color: PropTypes.string,\n  marginVertical: PropTypes.oneOf([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]),\n  paddingHorizontal: PropTypes.oneOf([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]),\n};\n\nFormDividerWithText.defaultProps = {\n  marginVertical: 1,\n  paddingHorizontal: 1,\n};\n\nexport {FormInput, FormButton, FormCheckbox, FormText, FormLink, FormDividerWithText};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogMui from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { FormButton } from \"../components/FormElements\";\n\nconst Dialog = (props) => {\n  return (\n    <DialogMui\n      open={props.dialogOpen}\n      onClose={() => props.dialogSetOpen(false)}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {props.dialogTitle}\n      </DialogTitle>\n      <DialogContent id=\"alert-dialog-description\">\n        <Typography variant=\"body1\" style={{whiteSpace: \"pre-line\"}}>\n          {props.dialogContent}\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        {props.dialogButtons.map((button, index) => (\n          <FormButton\n            key={index}\n            onClick={() => {\n              button.callback && button.callback();\n              if (button.close) {\n                props.dialogSetOpen(false);\n              }\n            }}\n            fullWidth={false}\n            className={\"buttonSecondary\"}\n            autoFocus={index === 0}\n          >\n            {button.text}\n          </FormButton>\n        ))}\n      </DialogActions>\n    </DialogMui>\n  );\n}\n\nDialog.propTypes = {\n  dialogId: PropTypes.string,\n  dialogOpen: PropTypes.bool,\n  dialogSetOpen: PropTypes.func,\n  dialogTitle: PropTypes.string,\n  dialogContent: PropTypes.string,\n  dialogButtons: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      close: PropTypes.bool,\n      callback: PropTypes.func,\n    })\n  ),\n};\n\nDialog.defaultProps = {\n  dialogOpen: false,\n  dialogButtons: [\n    {\n      text: \"Ok\",\n      close: true,\n      callback: () => {},\n    }\n  ],\n};\n\nexport default React.memo(Dialog);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h2c0-1.66 1.34-3 3-3s3 1.34 3 3v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\"\n}), 'LockOpenOutlined');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z\"\n}), 'LockOpen');\n\nexports.default = _default;","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOpenOutlined from \"@material-ui/icons/LockOpenOutlined\";\nimport ConfirmationNumber from \"@material-ui/icons/ConfirmationNumber\";\nimport Lock from \"@material-ui/icons/Lock\";\nimport LockOpen from \"@material-ui/icons/LockOpen\";\nimport { errorMessage } from \"../../libs/Misc\";\nimport AuthService from \"../../services/AuthService\";\nimport { toast } from \"../Toast\";\nimport { FormInput, FormButton, FormText, FormLink } from \"../FormElements\";\nimport { validateEmail, validatePassword } from \"../../libs/Validation\";\nimport Dialog from \"../Dialog\";\n\nconst styles = theme => ({\n  avatar: {\n    backgroundColor: theme.palette.success.main,\n  },\n  fieldset: {\n    border: 0,\n  },\n});\nconst useStyles = makeStyles((theme) => (styles(theme)));\n\nfunction ForgotPassword() {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmed, setPasswordConfirmed] = useState(\"\");\n  const [error, setError] = useState({ email: null, password: null, passwordConfirmed: null, code: null });\n  const [waitingForCode, setWaitingForCode] = useState(false);\n  const [codeDeliveryMedium, setCodeDeliveryMedium] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [dialogTitle, setDialogTitle] = useState(null);\n  const [dialogContent, setDialogContent] = useState(null);\n  const [dialogButtons, setDialogButtons] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const history = useHistory();\n  const { t } = useTranslation();\n \n  const openDialog = (title, content, buttons) => {\n    setDialogTitle(title);\n    setDialogContent(content);\n    setDialogButtons(buttons);\n    setDialogOpen(true);    \n  }\n\n  const validateForm = () => { // validate email formally\n    if (!waitingForCode) {\n      if (!validateEmail(email)) {\n        const err = t(\"Please supply a valid email\");\n        toast.warning(err);\n        setError({ email: err });\n        return false;\n      }\n    }\n\n    if (waitingForCode) {\n      if (!validatePassword(password)) {\n        const err = t(\"Please supply a more complex password\");\n        toast.warning(err);\n        setError({ password: err });\n        return false;\n      }\n\n      if (!passwordConfirmed) {\n        const err = t(\"Please confirm the password\");\n        setError({ passwordConfirmed: err });\n        toast.warning(err);\n        return false;\n      }\n  \n      if (password !== passwordConfirmed) {\n        const err = t(\"The confirmed password does not match the password\");\n        toast.warning(err);\n        setError({ passwordConfirmed: err });\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const formForgotPassword = (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setError({});\n\n    AuthService.forgotPassword({email}).then(\n      (result) => {\n        if (result instanceof Error) {\n          toast.error(errorMessage(result));\n          return setError({ email: errorMessage(result)});\n        }\n        setWaitingForCode(true);\n        setPassword(\"\");\n        switch (result.codeDeliveryMedium) {\n          default: // in future we could treat EMAIL/SMS/... separately...\n            const medium = result.codeDeliveryMedium;\n            setCodeDeliveryMedium(medium);\n            openDialog(\n              t(\"Verification code sent\"),\n              t(`Verification code sent via {{medium}} to {{email}}.`, {medium, email}) + `\\n` +\n              t(`Please copy and paste it here.`),\n            );\n        }\n      },\n    );\n  };\n  \n  const formConfirmForgotPassword = (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setError({});\n    \n    AuthService.resetPasswordConfirm({\n      email,\n      password,\n      code,\n    }).then(\n      result => {\n        if (result instanceof Error) {\nconsole.log(\"EC\", result.response.data.code, Object.keys(result), Object.values(result));\n          const code = result.response.data.code;\n          toast.error(errorMessage(result));\n          return code === \"code\" ? \n            setError({ confirmationCode: errorMessage(result) }) :\n            setError({ password: errorMessage(result) })\n          ;\n        }\n        setWaitingForCode(false);\n        setEmail(\"\");\n        setPassword(\"\");\n        setPasswordConfirmed(\"\");\n        setCode(\"\");\n        openDialog(\n          t(`Password reset success`),\n          t(`You can now sign in with your new password`),\n          [\n            {\n              text: t(\"Ok\"),\n              close: true,\n              callback: () => history.push(\"/signin\"),\n            }\n          ]\n        );\n      },\n    );\n  };\n  \n  const formResendResetPasswordCode = (e) => {\n    e.preventDefault();\n    setError({});\n\n    AuthService.resendResetPasswordCode({\n      email\n    }).then(\n      result => {\n        if (result instanceof Error) {\n          setError({ confirmationCode: errorMessage(result) }); // blame confirmationCode field\n          toast.error(errorMessage(result));\n          return;\n        }\n        toast.info(`A verification code has been sent via ${result.codeDeliveryMedium} to ${email}`);\n        //toast.info(\"Code resent successfully\");\n      }\n    );\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <fieldset /*disabled={promiseInProgress}*/ className={classes.fieldset}>\n          {!waitingForCode && (\n            <>\n\n              <Box m={1} />\n\n              <Grid container justifyContent=\"center\">\n                <Avatar className={classes.avatar}>\n                  <LockOpenOutlined />\n                </Avatar>\n              </Grid>\n\n              <Box m={3} />\n\n              <Grid container justifyContent=\"flex-start\">\n                <FormText>\n                  {t(\"Reset password\")}\n                </FormText>\n              </Grid>\n\n              <Box m={1} />\n\n              <FormInput\n                autoFocus\n                id={\"email\"}\n                value={email}\n                onChange={setEmail}\n                placeholder={t(\"Email\")}\n                startAdornmentIcon={<LockOpen />}\n                error={error.email}\n              />\n\n              <Box m={1} />\n\n              <FormButton\n                onClick={formForgotPassword}\n              >\n                {t(\"Request password reset\")}\n              </FormButton>\n              \n            </>\n          )}\n          {waitingForCode && (\n            <>\n\n              <FormInput\n                id={\"password\"}\n                type=\"password\"\n                value={password}\n                onChange={setPassword}\n                placeholder={t(\"New password\")}\n                startAdornmentIcon={<Lock />}\n                error={error.password}\n              />\n\n              <FormInput\n                id={\"passwordConfirmed\"}\n                type=\"password\"\n                value={passwordConfirmed}\n                onChange={setPasswordConfirmed}\n                placeholder={t(\"New password confirmation\")}\n                startAdornmentIcon={<Lock />}\n                error={error.passwordConfirmed}\n              />\n\n              <FormInput\n                id={\"confirmationCode\"}\n                type=\"number\"\n                value={code}\n                onChange={setCode}\n                placeholder={t(\"Numeric code just received by {{codeDeliveryMedium}}\", {codeDeliveryMedium})}\n                startAdornmentIcon={<ConfirmationNumber />}\n                error={error.confirmationCode}\n              />\n\n              <Box m={1} />\n\n              <FormButton\n                onClick={formConfirmForgotPassword}\n              >\n                {t(\"Confirm Password Reset\")}\n              </FormButton>\n\n              <Box m={2} />\n\n              <Grid container justifyContent=\"flex-end\">\n                <FormLink\n                  decoration=\"underline\"\n                  onClick={formResendResetPasswordCode}\n                >\n                  {t(\"Resend code\")}\n                </FormLink>\n              </Grid>\n\n            </>\n          )}\n        </fieldset>\n      </form>\n\n      <Dialog\n        dialogOpen={dialogOpen}\n        dialogSetOpen={setDialogOpen}\n        dialogTitle={dialogTitle}\n        dialogContent={dialogContent}\n        dialogButtons={dialogButtons}\n      />\n\n    </Container>\n  );\n}\n\nexport default React.memo(ForgotPassword);"],"sourceRoot":""}