{"version":3,"file":"static/js/633.8ab5225c.chunk.js","mappings":"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","sources":["components/AdminPanel.js","libs/Fetch.js"],"sourcesContent":["import React, { useState, useEffect/*, useContext*/ } from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\n//import CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTranslation } from \"react-i18next\";\n//import axios from \"axios\";\nimport { getUsers } from \"../libs/Fetch\";\nimport moment from \"moment\";\nimport \"moment/locale/it\"; // TODO: import all needed locales... (!!!)\nimport { toast } from \"./Toast\";\n//import { AuthContext } from \"../providers/AuthProvider\";\n\nconst useStyles = makeStyles(theme => ({\n\tadminPanel: {\n    fontSize: \"1.5em\",\n\t},\n}));\n\n\n\nfunction AdminPanel() {\n\tconst classes = useStyles();\n  //const { auth } = useContext(AuthContext);\n  const { t } = useTranslation();\n\n  const [data/*, setData*/] = useState({});\n\n  moment.locale(\"it\");\n\n  useEffect(() => {\n    (async () => {\n      await getUsers({}).then(data => {\n        if (!data.ok) {\n          console.warn(\"getUsers error:\", data);\n          toast.error(t(data.message));\n          return;\n        }\n        console.log(\"getUsers success:\", data);\n      }).catch(err => {\n        console.error(\"getUsers error catched:\", err);\n        toast.error(t(err.message));\n      });\n    })();\n\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${auth.user.accessToken}` }\n//       };\n// console.log('auth.user.accessToken:', auth.user.accessToken);\n//       const result = await axios.get(\n//         \"/api/user/\",\n//         config\n//         );\n//       //const res = await result.json();\n// console.log(\"result:\", result);\n//       setData(result.data);\n//     } catch(err) {\n//       console.log(\"Fetch error:\", err); // TODO...\n//       toast.error(t(err.message));\n//     }\n  }, [t]);\n\n  return (\n    <div className={classes.adminPanel}>\n      {`${t(\"Admin Panel\")}`}\n      <div>\n        <label>{t(\"Users:\")}</label>\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          {\n            data.users ? data.users.map(user => (\n              <Grid item xs={12} key={user._id}>\n                <Card>\n                  <CardContent style={{ fontSize: \"0.9em\" }}>\n                    <Typography color=\"text.primary\">\n                      {`${user.firstName} ${user.lastName}`}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {user.email}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {t(\"Roles\") + \":\"} {user.roles.length ? user.roles.join(\", \") : \"user\"}{/* \"user\" is default role */}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {t(\"Verified\") + \":\"} {user.isVerified ? t(\"yes\") : t(\"no\")}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {/* TODO: localize according current language... possibly in a much more outer level */}\n                      {t(\"Created on\") + \":\"} {moment(user.createdAt).locale(\"it\").format(\"YYYY-MM-DD\")}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {t(\"Updated on\") + \":\"} {moment(user.updatedAt).locale(\"it\").format(\"YYYY-MM-DD\")}\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      {t(\"Access token\") + \":\"} {user.accessToken}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            )) : \"...\"\n          }\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(AdminPanel);","import instance from \"../middlewares/Interceptors\";\n\nexport const signIn = (params) => {\n  return instance.post(\"/auth/login\", params).then(response => {\n    return { ok: true, ...response.data };\n  }).catch(err => {\n    return { ok: false, ...err.response.data };\n  });\n};\n\nexport const getUsers = (params) => {\n  return instance.post(\"/user\", params).then(response => {\n    return { ok: true, ...response.data };\n  }).catch(err => {\n    return { ok: false, ...err.response.data };\n  });\n};\n\nexport const forgotPassword = (params) => {\nconsole.log(\"FETCH forgotPassword /auth/recover - params:\", params);\n  return instance.post(\"/auth/recover\", params).then(response => {\n    return { ok: true, ...response.data };\n  }).catch(err => {\nconsole.error(\"ERR:\", err);\n    return { ok: false, ...err.response.data };\n  });\n};\n\nexport const forgotPasswordSubmit = (params) => {\nconsole.log(\"FETCH forgotPasswordSubmit /auth/reset - params:\", params);\n  return instance.post(\"/auth/reset\", params).then(response => {\n    return { ok: true, ...response.data };\n  }).catch(err => {\n    return { ok: false, ...err.response.data };\n  });\n};\n\nexport const resendResetPasswordCode = (params) => {\n  return instance.post(\"/auth/resend\", params).then(response => {\n    return { ok: true, ...response.data };\n  }).catch(err => {\n    return { ok: false, ...err.response.data };\n  });\n};\n\n// export const federatedSignIn = (params) => {\n// console.log(currentFunctionName(), params);\n//   //return fetcher(\"/api/auth/login\", \"POST\", params);\n//   //return instance.post(\"/auth/login\", params);PromiseRejectionEvent\n//   return instance.get(\"http://localhost:5000/api/auth/loginGoogle\", params).then(response => {\n//     console.log(\"response status:\", response.status);\n//     console.log(\"response data:\", JSON.stringify(response.data));\n//     return response.data;\n//   }).catch(err => {\n//     console.error(`Error fetching data: ${err}`, err); // TODO...\n//     return err;\n//   });\n// };\n\n// const Auth = {\n//   signUp: (params) => {\n//     //console.log(currentFunctionName(), params);\n//     return fetcher(\"/api/auth/register\", \"POST\", params);\n//   },\n//   confirmSignUp: (params) => {\n//     //console.log(currentFunctionName(), params);\n//     // TODO: props = props.filter(key => key === \"code\");\n//     return fetcher(`/api/auth/verify/${params.code}`, \"GET\", params); // TODO: change the name: choose verify or confirmSignUp, and code or token (better code) ...\n//   },\n//   signIn: (params) => {\n// console.log(currentFunctionName(), params);\n//     //return fetcher(\"/api/auth/login\", \"POST\", params);\n//     return instance.post(\"/api/auth/login\", params);\n//   },\n//   signOut: (params) => { // TODO: test me...\n//     return new Promise((resolve, reject) => {\n//       resolve();\n//     });\n//   },\n// };\n//\n// const fetcher = (url, method, params) => {\n//     return new Promise((resolve, reject) => {\n//       if (method === \"GET\" && params) {\n//         url += \"?\" + Object.keys(params).map((key) => {\n//           return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key])\n//         }).join(\"&\");\n//       }\n//       fetch(url, {\n//         method,\n//         headers: new Headers(config.api.headers),\n//         ...(params && method !== \"GET\" && { body: JSON.stringify(params) }),\n//         redirect: config.api.redirect,\n//       })\n//         .then(res => {\n//           try {\n//             res.json().then(data => {\n//               if (!res.ok) reject({status: res.status, statusText: res.statusText, message: data.message ? data.message : res.statusText})\n//               resolve(data);\n//             });\n//           } catch (err) {\n//             console.error(`fetch ${url} error:`, err); // TODO: !!!\n//             reject(err);\n//           }\n//         })\n//         .catch(err => {\n//           console.error(`fetch ${url} error:`, err); // TODO: !!!\n//           reject(err);\n//         })\n//       ;\n//     });\n//   }"],"names":["useStyles","makeStyles","theme","adminPanel","fontSize","AdminPanel","classes","t","useTranslation","useState","data","moment","useEffect","getUsers","then","ok","console","warn","toast","message","log","catch","err","error","className","container","spacing","direction","justify","alignItems","users","map","user","item","xs","style","color","firstName","lastName","email","roles","length","join","isVerified","createdAt","locale","format","updatedAt","accessToken","_id","React","signIn","params","instance","response","forgotPassword","forgotPasswordSubmit","resendResetPasswordCode"],"sourceRoot":""}