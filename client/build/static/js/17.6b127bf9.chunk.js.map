{"version":3,"sources":["services/JobService.js","services/UserService.js","components/PaymentResponse.js"],"names":["get","a","TokenService","getUser","api","JobService","set","job","put","upload","file","formData","FormData","append","post","headers","transformXls2Xml","filePath","validateXml","transform","outcomeCheck","anno","codiceFiscaleAmministrazione","outcomeFailureDetails","urlExistenceAndMatch","url","fileToMatch","console","log","getPlans","UserService","getProfile","then","response","data","error","updateProfile","email","password","firstName","lastName","address","fiscalCode","businessName","updateUserProperty","userId","propertyName","propertyValue","plans","updatePlan","plan","getRoles","roles","updateRoles","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","getAdminPanel","PaymentResponse","props","history","useHistory","t","useTranslation","useLocation","pathname","search","useState","user","setUser","setPlans","useEffect","status","match","queryParams","URLSearchParams","planName","result","EventBus","dispatch","toast","success","p","find","name","warn","push","tabValue","React","memo"],"mappings":"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","file":"static/js/17.6b127bf9.chunk.js","sourcesContent":["import api from \"./API\";\nimport TokenService from \"./TokenService\";\n\n// get job status\nconst get = async () => {\n  // const user = TokenService.getUser();\n  // if (!user) {\n  //   return null;\n  // }\n  // return api.get(\"/job/get\", {\n  //   userId: user._id,\n  // });\n\n  //const retval = await api.get(\"/job/get\");\n\n  const user = TokenService.getUser();\n  if (!user) {\n    return null;\n  }\n  return await api.get(\"/job/get\");\n};\n\n// set job status\nconst set = (job) => {\n  const user = TokenService.getUser();\n  if (!user) {\n    return null;\n  }\n\n  return api.put(\"/job/set\", {job});\n};\n\n// upload a file\nconst upload = (file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  \n  return api.post(\"/job/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }\n  });\n};\n\n// transform XLS to XML\nconst transformXls2Xml = (filePath) => {\n  return api.post(\"/job/transformXls2Xml/:filePath\", {\n    filePath,\n  });\n}\n\n// validate XML syntax\nconst validateXml = (transform) => {\n  return api.post(\"/job/validateXml/:transform\", {\n    transform,\n  });\n  // const retval = api.post(\"/job/validateXml/:transform\", {\n  //   transform,\n  // });\n  // console.log(\"****************** validateXml retval:\", retval);\n  // return retval;\n}\n\n// check ANAC periodic verification outcome\nconst outcomeCheck = (anno, codiceFiscaleAmministrazione) => {\n  return api.post(\"/job/outcomeCheck/:anno/:codiceFiscaleAmministrazione\",\n    {\n      anno,\n      codiceFiscaleAmministrazione,\n    }\n  );\n}\n\n// get ANAC periodic verification failed outcome details\nconst outcomeFailureDetails = (anno, codiceFiscaleAmministrazione) => {\n  return api.post(\n    \"/job/outcomeFailureDetails/anno/codiceFiscaleAmministrazione\",\n    {\n      anno,\n      codiceFiscaleAmministrazione,\n    }\n  );\n}\n\n// check url existence\nconst urlExistenceAndMatch = (url, fileToMatch) => {\nconsole.log(\"*** jobService - url,fileToMatch:\", url, fileToMatch);\n  return api.post(\n    \"/job/urlExistenceAndMatch/url/fileToMatch\",\n    {\n      url,\n      fileToMatch,\n    }\n  );\n}\n\n// // just to ignore big xml when debug printing...\n// const sanitizeJob = (job) => {\n//   if (!job?.transform?.xml) {\n//     return job;\n//   }\n//   let j = job;\n//   j.transform.xml = \"â€¦\";\n//   return j;\n// }\n\n// get ANAC periodic verification failed outcome details\nconst getPlans = () => {\n  return api.get(\n    \"/job/getPlans\",\n  );\n}\n\nconst JobService = {\n  get,\n  set,\n  upload,\n  transformXls2Xml,\n  validateXml,\n  outcomeCheck,\n  outcomeFailureDetails,\n  urlExistenceAndMatch,\n  //sanitizeJob,\n  getPlans,\n};\n\nexport default JobService;\n","import api from \"./API\";\n\nconst getProfile = () => {\n  return api.get(\"/user/getProfile\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateProfile = ({/*username, */email, password, firstName, lastName, address, fiscalCode, businessName}) => {\n  return api.post(\"/user/updateProfile\", {\n    //username,\n    email,\n    password,\n    firstName,\n    lastName,\n    address,\n    fiscalCode,\n    businessName,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateUserProperty = ({userId, propertyName, propertyValue}) => {\n  return api.post(\"/user/updateUserProperty\", {\n    userId,\n    propertyName,\n    propertyValue,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getPlans = plans => {\n  return api.get(\"/user/getPlans\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updatePlan = plan => {\n  console.log(\"updatePlan - plan:\", plan);\n  return api.post(\"/user/updatePlan\",\n    plan,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getRoles = roles => {\n  return api.get(\"/user/getRoles\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateRoles = roles => {\n  return api.post(\"/user/updateRoles\",\n    roles,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getPublicContent = () => {\n  return api.get(\"/test/all\");\n};\n\nconst getUserBoard = () => {\n  return api.get(\"/test/user\");\n};\n\nconst getModeratorBoard = () => {\n  return api.get(\"/test/mod\");\n};\n\nconst getAdminBoard = () => {\n  return api.get(\"/test/admin\");\n};\n\nconst getAdminPanel = () => {\n  return api.get(\"/admin/getAdminPanel\"\n  ).then(\n    (response) => {\n      return response.data;\n    },\n    (error) => {\n      return error;\n    }\n  );\n};\n\nconst UserService = {\n  getProfile,\n  updateProfile,\n  updateUserProperty,\n  getPlans,\n  updatePlan,\n  getRoles,\n  updateRoles,\n  getPublicContent,\n  getUserBoard,\n  getModeratorBoard,\n  getAdminBoard,\n  getAdminPanel,\n};\n\nexport default UserService;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n//import { errorMessage } from \"../libs/Misc\";\nimport EventBus from \"../libs/EventBus\";\nimport { toast } from \"./Toast\";\nimport UserService from \"../services/UserService\";\nimport TokenService from \"../services/TokenService\";\nimport JobService from \"../services/JobService\";\n\nfunction PaymentResponse(props) {\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { pathname, search } = useLocation();\n  const [ user, setUser ] = useState(TokenService.getUser());\n  const [ plans, setPlans ] = useState([]);\n\n // get user profile on load\n  // useEffect(() => {\n  //   console.log(\"useeffect getPlans\");\n  //   JobService.getPlans().then(\n  //     result => {\n  //       if (result instanceof Error) {\n  //         console.error(\"getPlans error:\", result);\n  //         toast.error(errorMessage(result));\n  //         return; //setError({ code: result.message });\n  //       }\n  //   console.log(`plans got successfully:`, result);\n  //       setPlans(result.data);\n  //     },\n  //     error => {\n  //       console.error(\"getPlans error:\", error);\n  //     }\n  //   );\n  // }, []);\n\n  useEffect(() => {\n    const status =\n      pathname.match(\"/payment-success\") ? \"success\" :\n      pathname.match(\"/payment-cancel\") ? \"cancel\" :\n      \"unknown\"\n    ;\n    const queryParams = new URLSearchParams(search);\n    const planName = queryParams.get(\"product\");\nconsole.log(\"queryParams, search:\", queryParams, search);\n//alert(\"planName:\" + planName);\n\n    if (status === \"success\") {\n      UserService.updatePlan({\n        plan: planName,\n      }).then(\n        result => {\n          JobService.getPlans().then(\n            result => {\n              console.log(\"*** updatePlan result OK (user?):\", result);\n              EventBus.dispatch(\"plan-change\");\n              toast.success(t(\"Plan updated successfully\"));\n              console.log(\"useeffect getPlans\");\n              console.log(`plans got successfully:`, result);\n              setPlans(result.data);\n              const p = result.data.find(plan => plan.name === planName);\n              //setPlan(p);\n              user.plan = p;\n              setUser(user);\n              TokenService.setUser(user);\n            },\n            error => {\n              console.error(\"getPlans error:\", error);\n            }\n          );\n        },\n        error => {\n          console.error(\"updatePlan error:\", error);\n        }\n      );\n    } else {\n      console.warn(\"PaymentResponse - path name was:\", pathname);\n    }\n\n    // redirect to profile, plans tab (2nd)\n    history.push(\"/profile\", { tabValue: 1 });\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [plans]);\n\n  return <></>;\n}\n\n\nexport default React.memo(PaymentResponse);"],"sourceRoot":""}