{"version":3,"sources":["services/UserService.js","components/PaymentResponse.js"],"names":["UserService","getProfile","api","get","then","response","data","error","updateProfile","email","password","firstName","lastName","address","fiscalCode","businessName","post","updateUserProperty","userId","propertyName","propertyValue","getAllPlans","plans","updatePlan","plan","console","log","getAllRoles","roles","updateRoles","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","getAllUsersWithFullInfo","PaymentResponse","props","history","useHistory","t","useTranslation","useLocation","pathname","search","useState","TokenService","getUser","user","setUser","setPlans","useEffect","status","match","queryParams","URLSearchParams","planName","result","EventBus","dispatch","toast","success","p","find","name","warn","push","tabValue","React","memo"],"mappings":"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","file":"static/js/19.86d5b5b6.chunk.js","sourcesContent":["import api from \"./API\";\n\nconst getProfile = () => {\n  return api.get(\"/user/getProfile\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateProfile = ({/*username, */email, password, firstName, lastName, address, fiscalCode, businessName}) => {\n  return api.post(\"/user/updateProfile\", {\n    //username,\n    email,\n    password,\n    firstName,\n    lastName,\n    address,\n    fiscalCode,\n    businessName,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateUserProperty = ({userId, propertyName, propertyValue}) => {\n  return api.post(\"/user/updateUserProperty\", {\n    userId,\n    propertyName,\n    propertyValue,\n  }).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getAllPlans = plans => {\n  return api.get(\"/user/getAllPlans\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updatePlan = plan => {\n  console.log(\"updatePlan - plan:\", plan);\n  return api.post(\"/user/updatePlan\",\n    plan,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getAllRoles = roles => {\n  return api.get(\"/user/getAllRoles\").then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst updateRoles = roles => {\n  return api.post(\"/user/updateRoles\",\n    roles,\n  ).then(\n    response => {\n      return response.data;\n    },\n    error => {\n      return error;\n    }\n  );\n};\n\nconst getPublicContent = () => {\n  return api.get(\"/test/all\");\n};\n\nconst getUserBoard = () => {\n  return api.get(\"/test/user\");\n};\n\nconst getModeratorBoard = () => {\n  return api.get(\"/test/mod\");\n};\n\nconst getAdminBoard = () => {\n  return api.get(\"/test/admin\");\n};\n\nconst getAllUsersWithFullInfo = () => {\n  return api.get(\"/user/getAllUsersWithFullInfo\"\n  ).then(\n    (response) => {\n      return response.data;\n    },\n    (error) => {\n      return error;\n    }\n  );\n};\n\nconst UserService = {\n  getProfile,\n  updateProfile,\n  updateUserProperty,\n  getAllPlans,\n  updatePlan,\n  getAllRoles,\n  updateRoles,\n  getPublicContent,\n  getUserBoard,\n  getModeratorBoard,\n  getAdminBoard,\n  getAllUsersWithFullInfo,\n};\n\nexport default UserService;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n//import { errorMessage } from \"../libs/Misc\";\nimport EventBus from \"../libs/EventBus\";\nimport { toast } from \"./Toast\";\nimport UserService from \"../services/UserService\";\nimport TokenService from \"../services/TokenService\";\n//import JobService from \"../services/JobService\";\n\nfunction PaymentResponse(props) {\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { pathname, search } = useLocation();\n  const [ user, setUser ] = useState(TokenService.getUser());\n  const [ plans, setPlans ] = useState([]);\n\n // get user profile on load\n  // useEffect(() => {\n  //   console.log(\"useeffect getAllPlans\");\n  //   JobService.getAllPlans().then(\n  //     result => {\n  //       if (result instanceof Error) {\n  //         console.error(\"getAllPlans error:\", result);\n  //         toast.error(errorMessage(result));\n  //         return; //setError({ code: result.message });\n  //       }\n  //   console.log(`plans got successfully:`, result);\n  //       setPlans(result.data);\n  //     },\n  //     error => {\n  //       console.error(\"getAllPlans error:\", error);\n  //     }\n  //   );\n  // }, []);\n\n  useEffect(() => {\n    const status =\n      pathname.match(\"/payment-success\") ? \"success\" :\n      pathname.match(\"/payment-cancel\") ? \"cancel\" :\n      \"unknown\"\n    ;\n    const queryParams = new URLSearchParams(search);\n    const planName = queryParams.get(\"product\");\nconsole.log(\"queryParams, search:\", queryParams, search);\n//alert(\"planName:\" + planName);\n\n    if (status === \"success\") {\n      UserService.updatePlan({\n        plan: planName,\n      }).then(\n        result => {\n          UserService.getAllPlans().then(\n            result => {\n              console.log(\"*** updatePlan result OK (user?):\", result);\n              EventBus.dispatch(\"plan-change\");\n              toast.success(t(\"Plan updated successfully\"));\n              console.log(\"useeffect getAllPlans\");\n              console.log(`plans got successfully:`, result);\n              setPlans(result.data);\n              const p = result.data.find(plan => plan.name === planName);\n              //setPlan(p);\n              user.plan = p;\n              setUser(user);\n              TokenService.setUser(user);\n            },\n            error => {\n              console.error(\"getAllPlans error:\", error);\n            }\n          );\n        },\n        error => {\n          console.error(\"updatePlan error:\", error);\n        }\n      );\n    } else {\n      console.warn(\"PaymentResponse - path name was:\", pathname);\n    }\n\n    // redirect to profile, plans tab (2nd)\n    history.push(\"/profile\", { tabValue: 1 });\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [plans]);\n\n  return <></>;\n}\n\n\nexport default React.memo(PaymentResponse);"],"sourceRoot":""}